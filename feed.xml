<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://arrow.apache.org/feed.xml" rel="self" type="application/atom+xml" /><link href="https://arrow.apache.org/" rel="alternate" type="text/html" /><updated>2021-06-04T05:15:49-04:00</updated><id>https://arrow.apache.org/feed.xml</id><title type="html">Apache Arrow</title><subtitle>Apache Arrow is a cross-language development platform for in-memory data. It specifies a standardized language-independent columnar memory format for flat and hierarchical data, organized for efficient analytic operations on modern hardware. It also provides computational libraries and zero-copy streaming messaging and interprocess communication. Languages currently supported include C, C++, C#, Go, Java, JavaScript, MATLAB, Python, R, Ruby, and Rust.</subtitle><entry><title type="html">A New Development Workflow for Arrow’s Rust Implementation</title><link href="https://arrow.apache.org/blog/2021/05/04/rust-dev-workflow/" rel="alternate" type="text/html" title="A New Development Workflow for Arrow’s Rust Implementation" /><published>2021-05-04T00:00:00-04:00</published><updated>2021-05-04T00:00:00-04:00</updated><id>https://arrow.apache.org/blog/2021/05/04/rust-dev-workflow</id><content type="html" xml:base="https://arrow.apache.org/blog/2021/05/04/rust-dev-workflow/">&lt;!--

--&gt;

&lt;p&gt;The Apache Arrow Rust community is excited to announce that its migration to a new development workflow is now complete! If you’re considering Rust as a language for working with columnar data, read on and see how your use case might benefit from our new and improved project setup.&lt;/p&gt;

&lt;p&gt;In recent months, members of the community have been working closely with Arrow’s &lt;a href=&quot;https://arrow.apache.org/committers/&quot;&gt;Project Management Committee&lt;/a&gt; and other contributors to expand the set of available workflows for Arrow implementations. The goal was to define a new development process that ultimately:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Enables a faster release cadence that adheres to &lt;a href=&quot;https://semver.org/&quot;&gt;SemVer&lt;/a&gt; where appropriate&lt;/li&gt;
  &lt;li&gt;Encourages maximum participation from the wider community with unified tooling&lt;/li&gt;
  &lt;li&gt;Ensures that we continue to uphold the tenets of &lt;a href=&quot;https://www.apache.org/theapacheway/&quot;&gt;The Apache Way&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you’re just here for the highlights, the major outcomes of these discussions are as follows:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The Rust projects have moved to separate repositories, outside the main Arrow &lt;a href=&quot;https://en.wikipedia.org/wiki/Monorepo&quot;&gt;monorepo&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/apache/arrow-rs&quot;&gt;arrow-rs&lt;/a&gt; for the core Arrow, Arrow Flight, and Parquet implementations in Rust&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/apache/arrow-datafusion&quot;&gt;arrow-datafusion&lt;/a&gt; for DataFusion and Ballista (more on these projects below!)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;The Rust community will use GitHub Issues for tracking feature development and issues, replacing the Jira instance maintained by the Apache Software Foundation (ASF)&lt;/li&gt;
  &lt;li&gt;DataFusion and Ballista will follow a new release cycle, independent of the main Arrow releases&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But why, as a community, have we decided to change our processes? Let’s take a slightly more in-depth look at the Rust implementation’s needs.&lt;/p&gt;

&lt;h2 id=&quot;project-structure&quot;&gt;Project Structure&lt;/h2&gt;
&lt;p&gt;The Rust implementation of Arrow actually consists of several distinct projects, or in Rust parlance, &lt;a href=&quot;https://doc.rust-lang.org/book/ch07-01-packages-and-crates.html&quot;&gt;“crates”&lt;/a&gt;. In addition to the core crates, namely &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;arrow&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;arrow-flight&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parquet&lt;/code&gt;, we also maintain:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/apache/arrow-datafusion/datafusion&quot;&gt;DataFusion&lt;/a&gt;: an extensible in-memory query execution engine using Arrow as its format&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/apache/arrow-datafusion/ballista&quot;&gt;Ballista&lt;/a&gt;: a distributed compute platform, powered by Apache Arrow and DataFusion&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Whilst these projects are all closely related, with many shared contributors, they’re very much at different stages in their respective lifecycles. The core Arrow crate, as an implementation of a spec, has strict compatibility requirements with other versions of Arrow, and this is tested via rigorous cross-language integration tests.&lt;/p&gt;

&lt;p&gt;However, at the other end of the spectrum, DataFusion and Ballista are still nascent projects in their own right that undergo frequent backwards-incompatible changes. In the old workflow, DataFusion was released in lockstep with Arrow; because DataFusion users often need newly-contributed features or bugfixes on a tighter schedule than Arrow releases, we observed that many people in the community simply resorted to referencing our GitHub repository directly, rather than properly versioned builds on &lt;a href=&quot;https://crates.io/&quot;&gt;crates.io&lt;/a&gt;, Rust’s package registry.&lt;/p&gt;

&lt;p&gt;Ultimately, the decision was made to split the Rust crates into two separate repositories: &lt;a href=&quot;https://github.com/apache/arrow-rs&quot;&gt;arrow-rs&lt;/a&gt; for the core Arrow functionality, and &lt;a href=&quot;https://github.com/apache/arrow-datafusion&quot;&gt;arrow-datafusion&lt;/a&gt; for DataFusion and Ballista. There’s still work to be done on determining the exact release workflows for the latter, but this leaves us in a much better position to meet the broader Rust community’s expectations of crate versioning and stability.&lt;/p&gt;

&lt;h2 id=&quot;community-participation&quot;&gt;Community Participation&lt;/h2&gt;
&lt;p&gt;All Apache projects are built on volunteer contribution; it’s a core principle of both the ASF and open-source software development more broadly. One point of friction that was observed in the previous workflow for the Rust community in particular was the requirement for issues to be logged in Arrow’s Jira project. This step required would-be contributors to first register an account, and then receive a permissions grant to manage tickets.&lt;/p&gt;

&lt;p&gt;To streamline this process for new community members, we’ve taken the decision to migrate to GitHub Issues for tracking both new development work and known bugs that need addressing, and bootstrapped our new repositories by importing their respective tickets from Jira. Creating issues to track non-trivial proposed features and enhancements is still required; this creates an opportunity for community review and helps ensure that feedback is delivered as early in the process as possible. We hope that this strikes a better balance between organization and accessibility for prospective contributors.&lt;/p&gt;

&lt;h2 id=&quot;get-involved&quot;&gt;Get Involved&lt;/h2&gt;
&lt;p&gt;To further improve the onboarding flow for new Arrow contributors, we have started the process of labeling select issues as “good first issue” in &lt;a href=&quot;https://github.com/apache/arrow-rs/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22&quot;&gt;arrow-rs&lt;/a&gt; and &lt;a href=&quot;https://github.com/apache/arrow-datafusion/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22&quot;&gt;arrow-datafusion&lt;/a&gt;. These issues are small in scope but still serve as valuable contributions to the project, and help new community members to get familiar with our development workflows and tools.&lt;/p&gt;

&lt;p&gt;Not quite sure where to start with a particular issue, or curious about the status of one of our projects? Join the Arrow &lt;a href=&quot;https://arrow.apache.org/community&quot;&gt;mailing lists&lt;/a&gt; or the #arrow-rust channel on the &lt;a href=&quot;https://s.apache.org/slack-invite&quot;&gt;ASF Slack&lt;/a&gt; server.&lt;/p&gt;

&lt;h2 id=&quot;in-closing&quot;&gt;In Closing&lt;/h2&gt;
&lt;p&gt;As a final note: nothing here is intended as prescriptive advice. As a community, we’ve decided that these processes are the best fit for the current status of our projects, but this may change over time! There is, after all, &lt;a href=&quot;https://en.wikipedia.org/wiki/No_Silver_Bullet&quot;&gt;no silver bullet&lt;/a&gt; for software engineering.&lt;/p&gt;</content><author><name>ruanpa</name></author><category term="application" /><summary type="html">The Apache Arrow Rust community is excited to announce that its migration to a new development workflow is now complete! If you’re considering Rust as a language for working with columnar data, read on and see how your use case might benefit from our new and improved project setup. In recent months, members of the community have been working closely with Arrow’s Project Management Committee and other contributors to expand the set of available workflows for Arrow implementations. The goal was to define a new development process that ultimately: Enables a faster release cadence that adheres to SemVer where appropriate Encourages maximum participation from the wider community with unified tooling Ensures that we continue to uphold the tenets of The Apache Way If you’re just here for the highlights, the major outcomes of these discussions are as follows: The Rust projects have moved to separate repositories, outside the main Arrow monorepo arrow-rs for the core Arrow, Arrow Flight, and Parquet implementations in Rust arrow-datafusion for DataFusion and Ballista (more on these projects below!) The Rust community will use GitHub Issues for tracking feature development and issues, replacing the Jira instance maintained by the Apache Software Foundation (ASF) DataFusion and Ballista will follow a new release cycle, independent of the main Arrow releases But why, as a community, have we decided to change our processes? Let’s take a slightly more in-depth look at the Rust implementation’s needs. Project Structure The Rust implementation of Arrow actually consists of several distinct projects, or in Rust parlance, “crates”. In addition to the core crates, namely arrow, arrow-flight, and parquet, we also maintain: DataFusion: an extensible in-memory query execution engine using Arrow as its format Ballista: a distributed compute platform, powered by Apache Arrow and DataFusion Whilst these projects are all closely related, with many shared contributors, they’re very much at different stages in their respective lifecycles. The core Arrow crate, as an implementation of a spec, has strict compatibility requirements with other versions of Arrow, and this is tested via rigorous cross-language integration tests. However, at the other end of the spectrum, DataFusion and Ballista are still nascent projects in their own right that undergo frequent backwards-incompatible changes. In the old workflow, DataFusion was released in lockstep with Arrow; because DataFusion users often need newly-contributed features or bugfixes on a tighter schedule than Arrow releases, we observed that many people in the community simply resorted to referencing our GitHub repository directly, rather than properly versioned builds on crates.io, Rust’s package registry. Ultimately, the decision was made to split the Rust crates into two separate repositories: arrow-rs for the core Arrow functionality, and arrow-datafusion for DataFusion and Ballista. There’s still work to be done on determining the exact release workflows for the latter, but this leaves us in a much better position to meet the broader Rust community’s expectations of crate versioning and stability. Community Participation All Apache projects are built on volunteer contribution; it’s a core principle of both the ASF and open-source software development more broadly. One point of friction that was observed in the previous workflow for the Rust community in particular was the requirement for issues to be logged in Arrow’s Jira project. This step required would-be contributors to first register an account, and then receive a permissions grant to manage tickets. To streamline this process for new community members, we’ve taken the decision to migrate to GitHub Issues for tracking both new development work and known bugs that need addressing, and bootstrapped our new repositories by importing their respective tickets from Jira. Creating issues to track non-trivial proposed features and enhancements is still required; this creates an opportunity for community review and helps ensure that feedback is delivered as early in the process as possible. We hope that this strikes a better balance between organization and accessibility for prospective contributors. Get Involved To further improve the onboarding flow for new Arrow contributors, we have started the process of labeling select issues as “good first issue” in arrow-rs and arrow-datafusion. These issues are small in scope but still serve as valuable contributions to the project, and help new community members to get familiar with our development workflows and tools. Not quite sure where to start with a particular issue, or curious about the status of one of our projects? Join the Arrow mailing lists or the #arrow-rust channel on the ASF Slack server. In Closing As a final note: nothing here is intended as prescriptive advice. As a community, we’ve decided that these processes are the best fit for the current status of our projects, but this may change over time! There is, after all, no silver bullet for software engineering.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://arrow.apache.org/img/arrow.png" /><media:content medium="image" url="https://arrow.apache.org/img/arrow.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Apache Arrow 4.0.0 Release</title><link href="https://arrow.apache.org/blog/2021/05/03/4.0.0-release/" rel="alternate" type="text/html" title="Apache Arrow 4.0.0 Release" /><published>2021-05-03T02:00:00-04:00</published><updated>2021-05-03T02:00:00-04:00</updated><id>https://arrow.apache.org/blog/2021/05/03/4.0.0-release</id><content type="html" xml:base="https://arrow.apache.org/blog/2021/05/03/4.0.0-release/">&lt;!--

--&gt;

&lt;p&gt;The Apache Arrow team is pleased to announce the 4.0.0 release. This covers
3 months of development work and includes &lt;a href=&quot;https://issues.apache.org/jira/issues/?jql=project%20%3D%20ARROW%20AND%20status%20%3D%20Resolved%20AND%20fixVersion%20%3D%204.0.0&quot;&gt;&lt;strong&gt;711 resolved issues&lt;/strong&gt;&lt;/a&gt;
from &lt;a href=&quot;/release/4.0.0.html#contributors&quot;&gt;&lt;strong&gt;114 distinct contributors&lt;/strong&gt;&lt;/a&gt;. See the Install Page to learn how to
get the libraries for your platform.&lt;/p&gt;

&lt;p&gt;The release notes below are not exhaustive and only expose selected highlights
of the release. Many other bugfixes and improvements have been made: we refer
you to the &lt;a href=&quot;/release/4.0.0.html&quot;&gt;complete changelog&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;community&quot;&gt;Community&lt;/h2&gt;

&lt;p&gt;Since the 3.0.0 release, Yibo Cai, Ian Cook, and Jonathan Keane
have been invited as committers to Arrow,
and Andrew Lamb and Jorge Leitão have joined the Project Management Committee
(PMC). Thank you for all of your contributions!&lt;/p&gt;

&lt;h2 id=&quot;arrow-flight-rpc-notes&quot;&gt;Arrow Flight RPC notes&lt;/h2&gt;

&lt;p&gt;In Java, applications can now enable zero-copy optimizations when writing
data (ARROW-11066). This potentially breaks source compatibility, so it is
not enabled by default.&lt;/p&gt;

&lt;p&gt;Arrow Flight is now packaged for C#/.NET.&lt;/p&gt;

&lt;h2 id=&quot;linux-packages-notes&quot;&gt;Linux packages notes&lt;/h2&gt;

&lt;p&gt;There are Linux packages for C++ and C GLib. They were provided by Bintray
but &lt;a href=&quot;https://jfrog.com/blog/into-the-sunset-bintray-jcenter-gocenter-and-chartcenter/&quot;&gt;Bintray is no longer available as of 2021-05-01&lt;/a&gt;. They are provided
by Artifactory now. Users needs to change the install instructions because the URL
has changed. See &lt;a href=&quot;/install/&quot;&gt;the install page&lt;/a&gt; for new instructions. Here is a
summary of needed changes.&lt;/p&gt;

&lt;p&gt;For Debian GNU Linux and Ubuntu users:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Users need to change the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apache-arrow-archive-keyring&lt;/code&gt; install instruction:
    &lt;ul&gt;
      &lt;li&gt;Package name is changed to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apache-arrow-apt-source&lt;/code&gt;.&lt;/li&gt;
      &lt;li&gt;Download URL is changed to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://apache.jfrog.io/artifactory/arrow/...&lt;/code&gt; from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://apache.bintray.com/arrow/...&lt;/code&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For CentOS and Red Hat Enterprise Linux users:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Users need to change the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apache-arrow-release&lt;/code&gt; install instruction:
    &lt;ul&gt;
      &lt;li&gt;Download URL is changed to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://apache.jfrog.io/artifactory/arrow/...&lt;/code&gt; from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://apache.bintray.com/arrow/...&lt;/code&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;c-notes&quot;&gt;C++ notes&lt;/h2&gt;

&lt;p&gt;The Arrow C++ library now includes a &lt;a href=&quot;https://github.com/apache/arrow/blob/master/cpp/vcpkg.json&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vcpkg.json&lt;/code&gt;&lt;/a&gt;
manifest file and a new CMake option &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-DARROW_DEPENDENCY_SOURCE=VCPKG&lt;/code&gt; to
simplify installation of dependencies using the &lt;a href=&quot;https://github.com/microsoft/vcpkg&quot;&gt;vcpkg&lt;/a&gt;
package manager. This provides an alternative means of installing C++ library
dependencies on Linux, macOS, and Windows. See the
&lt;a href=&quot;/docs/developers/cpp/building.html&quot;&gt;Building Arrow C++&lt;/a&gt;
and &lt;a href=&quot;/docs/developers/cpp/windows.html&quot;&gt;Developing on Windows&lt;/a&gt;
docs pages for details.&lt;/p&gt;

&lt;p&gt;The default memory allocator on macOS has been changed from jemalloc to mimalloc,
yielding performance benefits on a range of macro-benchmarks (ARROW-12316).&lt;/p&gt;

&lt;p&gt;Non-monotonic dense union offsets are now disallowed as per the Arrow format
specification, and return an error in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Array::ValidateFull&lt;/code&gt; (ARROW-10580).&lt;/p&gt;

&lt;h3 id=&quot;compute-layer&quot;&gt;Compute layer&lt;/h3&gt;

&lt;p&gt;Automatic implicit casting in compute kernels (ARROW-8919). For example, for
the addition of two arrays, the arrays are first cast to their common numeric
type instead of erroring when the types are not equal.&lt;/p&gt;

&lt;p&gt;Compute functions &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;quantile&lt;/code&gt; (ARROW-10831) and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;power&lt;/code&gt; (ARROW-11070) have been
added for numeric data.&lt;/p&gt;

&lt;p&gt;Compute functions for string processing have been added for:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Trimming characters (ARROW-9128).&lt;/li&gt;
  &lt;li&gt;Extracting substrings captured by a regex pattern (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;extract_regex&lt;/code&gt;, ARROW-10195).&lt;/li&gt;
  &lt;li&gt;Computing UTF8 string lengths (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;utf8_length&lt;/code&gt;, ARROW-11693).&lt;/li&gt;
  &lt;li&gt;Matching strings against regex pattern (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;match_substring_regex&lt;/code&gt;, ARROW-12134).&lt;/li&gt;
  &lt;li&gt;Replacing non-overlapping substrings that match a literal pattern or regular
expression (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;replace_substring&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;replace_substring_regex&lt;/code&gt;, ARROW-10306).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It is now possible to sort decimal and fixed-width binary data (ARROW-11662).&lt;/p&gt;

&lt;p&gt;The precision of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sum&lt;/code&gt; kernel was improved (ARROW-11758).&lt;/p&gt;

&lt;h3 id=&quot;csv&quot;&gt;CSV&lt;/h3&gt;

&lt;p&gt;A CSV writer has been added (ARROW-2229).&lt;/p&gt;

&lt;p&gt;The CSV reader can now infer timestamp columns with fractional seconds (ARROW-12031).&lt;/p&gt;

&lt;h3 id=&quot;dataset&quot;&gt;Dataset&lt;/h3&gt;

&lt;p&gt;Arrow Datasets received various performance improvements and new
features. Some highlights:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;New columns can be projected from arbitrary expressions at scan time
(ARROW-11174)&lt;/li&gt;
  &lt;li&gt;Read performance was improved for Parquet on high-latency
filesystems (ARROW-11601) and in general when there are thousands of
files or more (ARROW-8658)&lt;/li&gt;
  &lt;li&gt;Null partition keys can be written (ARROW-10438)&lt;/li&gt;
  &lt;li&gt;Compressed CSV files can be read (ARROW-10372)&lt;/li&gt;
  &lt;li&gt;Filesystems support async operations (ARROW-10846)&lt;/li&gt;
  &lt;li&gt;Usage and API documentation were added (ARROW-11677)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;files-and-filesystems&quot;&gt;Files and filesystems&lt;/h3&gt;

&lt;p&gt;Fixed some rare instances of GZip files could not be read properly (ARROW-12169).&lt;/p&gt;

&lt;p&gt;Support for setting S3 proxy parameters has been added (ARROW-8900).&lt;/p&gt;

&lt;p&gt;The HDFS filesystem is now able to write more than 2GB of data at a time
(ARROW-11391).&lt;/p&gt;

&lt;h3 id=&quot;ipc&quot;&gt;IPC&lt;/h3&gt;

&lt;p&gt;The IPC reader now supports reading data with dictionaries shared between
different schema fields (ARROW-11838).&lt;/p&gt;

&lt;p&gt;The IPC reader now supports optional endian conversion when receiving IPC
data represented with a different endianness. It is therefore possible to
exchange Arrow data between systems with different endiannesses (ARROW-8797).&lt;/p&gt;

&lt;p&gt;The IPC file writer now optionally unifies dictionaries when writing a
file in a single shot, instead of erroring out if unequal dictionaries are
encountered (ARROW-10406).&lt;/p&gt;

&lt;p&gt;An interoperability issue with the C# implementation was fixed (ARROW-12100).&lt;/p&gt;

&lt;h3 id=&quot;json&quot;&gt;JSON&lt;/h3&gt;

&lt;p&gt;A possible crash when reading a line-separated JSON file has been fixed (ARROW-12065).&lt;/p&gt;

&lt;h3 id=&quot;orc&quot;&gt;ORC&lt;/h3&gt;

&lt;p&gt;The Arrow C++ library now includes an ORC file writer. Hence it is possible
to both read and write ORC files from/to Arrow data.&lt;/p&gt;

&lt;h3 id=&quot;parquet&quot;&gt;Parquet&lt;/h3&gt;

&lt;p&gt;The Parquet C++ library version is now synced with the Arrow version (ARROW-7830).&lt;/p&gt;

&lt;p&gt;Parquet DECIMAL statistics were previously calculated incorrectly, this
has now been fixed (PARQUET-1655).&lt;/p&gt;

&lt;p&gt;Initial support for high-level Parquet encryption APIs similar to those
in parquet-mr is available (ARROW-9318).&lt;/p&gt;

&lt;h2 id=&quot;c-notes-1&quot;&gt;C# notes&lt;/h2&gt;

&lt;p&gt;Arrow Flight is now packaged for C#/.NET.&lt;/p&gt;

&lt;h2 id=&quot;go-notes&quot;&gt;Go notes&lt;/h2&gt;

&lt;p&gt;The go implementation now supports IPC buffer compression&lt;/p&gt;

&lt;h2 id=&quot;java-notes&quot;&gt;Java notes&lt;/h2&gt;

&lt;p&gt;Java now supports IPC buffer compression (ZSTD is recommended as the current performance of LZ4 is quite slow).&lt;/p&gt;

&lt;h2 id=&quot;javascript-notes&quot;&gt;JavaScript notes&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;The Arrow JS module is now tree-shakeable.&lt;/li&gt;
  &lt;li&gt;Iterating over Tables or Vectors is ~2X faster. &lt;a href=&quot;https://observablehq.com/@domoritz/arrow-js-3-vs-4-iterator&quot;&gt;Demo&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;The default bundles use modern JS.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;python-notes&quot;&gt;Python notes&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Limited support for writing out CSV files (only types that have cast implementation to String) is now available.&lt;/li&gt;
  &lt;li&gt;Writing parquet list types now has the option of enabling the canonical group naming according to the Parquet specification.&lt;/li&gt;
  &lt;li&gt;The ORC Writer is now available.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Creating a dataset with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pyarrow.dataset.write_dataset&lt;/code&gt; is now possible from a
Python iterator of record batches (ARROW-10882).
The Dataset interface can now use custom projections using expressions when
scanning (ARROW-11750). The expressions gained basic support for arithmetic
operations (e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ds.field(&apos;a&apos;) / ds.field(&apos;b&apos;)&lt;/code&gt;) (ARROW-12058). See
the &lt;a href=&quot;https://arrow.apache.org/docs/python/dataset.html#projecting-columns&quot;&gt;Dataset docs&lt;/a&gt; for more details.&lt;/p&gt;

&lt;p&gt;See the C++ notes above for additional details.&lt;/p&gt;

&lt;h2 id=&quot;r-notes&quot;&gt;R notes&lt;/h2&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dplyr&lt;/code&gt; interface to Arrow data gained many new features in this release, including support for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mutate()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;relocate()&lt;/code&gt;, and more. You can also call in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;filter()&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mutate()&lt;/code&gt; over 100 functions supported by the Arrow C++ library, and many string functions are available both by their base R (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;grepl()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gsub()&lt;/code&gt;, etc.) and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stringr&lt;/code&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;str_detect()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;str_replace()&lt;/code&gt;) spellings.&lt;/p&gt;

&lt;p&gt;Datasets can now read compressed CSVs automatically, and you can also open a dataset that is based on a single file, enabling you to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;write_dataset()&lt;/code&gt; to partition a very large file without having to read the whole file into memory.&lt;/p&gt;

&lt;p&gt;For more on what’s in the 4.0.0 R package, see the &lt;a href=&quot;/docs/r/news/&quot;&gt;R changelog&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;c-glib-and-ruby-notes&quot;&gt;C GLib and Ruby notes&lt;/h2&gt;

&lt;h3 id=&quot;c-glib&quot;&gt;C GLib&lt;/h3&gt;

&lt;p&gt;In Arrow GLib version 4.0.0, the following changes are introduced in addition to the changes by Arrow C++.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;gandiva-glib supports filtering by using the newly introduced &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GGandivaFilter&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GGandivaCondition&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GGandivaSelectableProjector&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;input&lt;/code&gt; property is added in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GArrowCSVReader&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GArrowJSONReader&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;GNU Autotools, namely &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;configure&lt;/code&gt; script, support is dropped&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GADScanContext&lt;/code&gt; is removed, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;use_threads&lt;/code&gt; property is moved to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GADScanOptions&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;garrow_chunked_array_combine&lt;/code&gt; function is added&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;garrow_array_concatenate&lt;/code&gt; function is added&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GADFragment&lt;/code&gt; and its subclass &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GADInMemoryFragment&lt;/code&gt; are added&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GADScanTask&lt;/code&gt; now holds the corresponding &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GADFragment&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gad_scan_options_replace_schema&lt;/code&gt; function is removed&lt;/li&gt;
  &lt;li&gt;The name of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Decimal128DataType&lt;/code&gt; is changed to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;decimal128&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;ruby&quot;&gt;Ruby&lt;/h3&gt;

&lt;p&gt;In Red Arrow version 4.0.0, the following changes are introduced in addition to the changes by Arrow GLib.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ArrowDataset::ScanContext&lt;/code&gt; is removed, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;use_threads&lt;/code&gt; attribute is moved to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ArrowDataset::ScanOptions&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arrow::Array#concatenate&lt;/code&gt; is added; it can concatenate not only an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arrow::Array&lt;/code&gt; but also a normal &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Array&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arrow::SortKey&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arrow::SortOptions&lt;/code&gt; are added for accepting Ruby objects as sort key and options&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ArrowDataset::InMemoryFragment&lt;/code&gt; is added&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;rust-notes&quot;&gt;Rust notes&lt;/h2&gt;

&lt;p&gt;This release of Arrow continues to add new features and performance improvements. Much of our time this release was spent hammering out the necessary details so we can release the Rust versions to cargo at a more regular rate. In addition, we welcomed the &lt;a href=&quot;https://ballistacompute.org/&quot;&gt;Ballista distributed compute project&lt;/a&gt; officially to the fold.&lt;/p&gt;

&lt;h3 id=&quot;arrow&quot;&gt;Arrow&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Improved LargeUtf8 support&lt;/li&gt;
  &lt;li&gt;Improved null handling in AND/OR kernels&lt;/li&gt;
  &lt;li&gt;Added JSON writer support (ARROW-11310)&lt;/li&gt;
  &lt;li&gt;JSON reader improvements&lt;/li&gt;
  &lt;li&gt;LargeUTF8
    &lt;ul&gt;
      &lt;li&gt;Improved schema inference for nested list and struct types&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Various performance improvements&lt;/li&gt;
  &lt;li&gt;IPC writer no longer calls finish() implicitly on drop&lt;/li&gt;
  &lt;li&gt;Compute kernels
    &lt;ul&gt;
      &lt;li&gt;Support for optional &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;limit&lt;/code&gt; in sort kernel&lt;/li&gt;
      &lt;li&gt;Divide by a single scalar&lt;/li&gt;
      &lt;li&gt;Support for casting to timestamps&lt;/li&gt;
      &lt;li&gt;Cast: Improved support between casting List, LargeList, Int32, Int64, Date64&lt;/li&gt;
      &lt;li&gt;Kernel to combine two arrays based on boolean mask&lt;/li&gt;
      &lt;li&gt;Pow kernel&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;new_null_array&lt;/code&gt; for creating Arrays full of nulls.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;parquet-1&quot;&gt;Parquet&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Added support for filtering row groups (used by DataFusion to implement filter push-down)&lt;/li&gt;
  &lt;li&gt;Added support for Parquet v 2.0 logical types&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;datafusion&quot;&gt;DataFusion&lt;/h3&gt;

&lt;p&gt;New Features&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;SQL Support&lt;/li&gt;
  &lt;li&gt;
    &lt;ul&gt;
      &lt;li&gt;CTEs&lt;/li&gt;
      &lt;li&gt;UNION&lt;/li&gt;
      &lt;li&gt;HAVING&lt;/li&gt;
      &lt;li&gt;EXTRACT&lt;/li&gt;
      &lt;li&gt;SHOW TABLES&lt;/li&gt;
      &lt;li&gt;SHOW COLUMNS&lt;/li&gt;
      &lt;li&gt;INTERVAL&lt;/li&gt;
      &lt;li&gt;SQL Information schema&lt;/li&gt;
      &lt;li&gt;Support GROUP BY for more data types, including dictionary columns, boolean, Date32&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Extensibility API
    &lt;ul&gt;
      &lt;li&gt;Catalogs and schemas support&lt;/li&gt;
      &lt;li&gt;Table deregistration&lt;/li&gt;
      &lt;li&gt;Better support for multiple optimizers&lt;/li&gt;
      &lt;li&gt;User defined functions can now provide specialized implementations for scalar values&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Physical Plans&lt;/li&gt;
  &lt;li&gt;Hash Repartitioning&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;SQL Metrics&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Additional Postgres compatible function library:
    &lt;ul&gt;
      &lt;li&gt;Length functions&lt;/li&gt;
      &lt;li&gt;Pad/trim functions&lt;/li&gt;
      &lt;li&gt;Concat functions&lt;/li&gt;
      &lt;li&gt;Ascii/Unicode functions&lt;/li&gt;
      &lt;li&gt;Regex&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Proper identifier case identification (e.g. “Foo” vs Foo vs foo)&lt;/li&gt;
  &lt;li&gt;Upgraded to Tokio 1.x&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Performance Improvements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;LIMIT pushdown&lt;/li&gt;
  &lt;li&gt;Constant folding&lt;/li&gt;
  &lt;li&gt;Partitioned hash join&lt;/li&gt;
  &lt;li&gt;Create hashes vectorized in hash join&lt;/li&gt;
  &lt;li&gt;Improve parallelism using repartitioning pass&lt;/li&gt;
  &lt;li&gt;Improved hash aggregate performance with large number of grouping values&lt;/li&gt;
  &lt;li&gt;Predicate pushdown support for table scans&lt;/li&gt;
  &lt;li&gt;Predicate push-down to parquet enables DataFusion to quickly eliminate entire parquet row-groups based on query filter expressions and parquet row group min/max statistics&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;API Changes&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;DataFrame methods now take &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Vec&amp;lt;Expr&amp;gt;&lt;/code&gt; rather than &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;amp;[Expr]&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;TableProvider now consistently uses &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arc&amp;lt;TableProvider&amp;gt;&lt;/code&gt; rather than &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Box&amp;lt;TableProvider&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;ballista&quot;&gt;Ballista&lt;/h3&gt;

&lt;p&gt;Ballista was donated shortly before the Arrow 4.0.0 release and there is no new release of Ballista as part of Arrow 4.0.0&lt;/p&gt;</content><author><name>pmc</name></author><category term="release" /><summary type="html">The Apache Arrow team is pleased to announce the 4.0.0 release. This covers 3 months of development work and includes 711 resolved issues from 114 distinct contributors. See the Install Page to learn how to get the libraries for your platform. The release notes below are not exhaustive and only expose selected highlights of the release. Many other bugfixes and improvements have been made: we refer you to the complete changelog. Community Since the 3.0.0 release, Yibo Cai, Ian Cook, and Jonathan Keane have been invited as committers to Arrow, and Andrew Lamb and Jorge Leitão have joined the Project Management Committee (PMC). Thank you for all of your contributions! Arrow Flight RPC notes In Java, applications can now enable zero-copy optimizations when writing data (ARROW-11066). This potentially breaks source compatibility, so it is not enabled by default. Arrow Flight is now packaged for C#/.NET. Linux packages notes There are Linux packages for C++ and C GLib. They were provided by Bintray but Bintray is no longer available as of 2021-05-01. They are provided by Artifactory now. Users needs to change the install instructions because the URL has changed. See the install page for new instructions. Here is a summary of needed changes. For Debian GNU Linux and Ubuntu users: Users need to change the apache-arrow-archive-keyring install instruction: Package name is changed to apache-arrow-apt-source. Download URL is changed to https://apache.jfrog.io/artifactory/arrow/... from https://apache.bintray.com/arrow/.... For CentOS and Red Hat Enterprise Linux users: Users need to change the apache-arrow-release install instruction: Download URL is changed to https://apache.jfrog.io/artifactory/arrow/... from https://apache.bintray.com/arrow/.... C++ notes The Arrow C++ library now includes a vcpkg.json manifest file and a new CMake option -DARROW_DEPENDENCY_SOURCE=VCPKG to simplify installation of dependencies using the vcpkg package manager. This provides an alternative means of installing C++ library dependencies on Linux, macOS, and Windows. See the Building Arrow C++ and Developing on Windows docs pages for details. The default memory allocator on macOS has been changed from jemalloc to mimalloc, yielding performance benefits on a range of macro-benchmarks (ARROW-12316). Non-monotonic dense union offsets are now disallowed as per the Arrow format specification, and return an error in Array::ValidateFull (ARROW-10580). Compute layer Automatic implicit casting in compute kernels (ARROW-8919). For example, for the addition of two arrays, the arrays are first cast to their common numeric type instead of erroring when the types are not equal. Compute functions quantile (ARROW-10831) and power (ARROW-11070) have been added for numeric data. Compute functions for string processing have been added for: Trimming characters (ARROW-9128). Extracting substrings captured by a regex pattern (extract_regex, ARROW-10195). Computing UTF8 string lengths (utf8_length, ARROW-11693). Matching strings against regex pattern (match_substring_regex, ARROW-12134). Replacing non-overlapping substrings that match a literal pattern or regular expression (replace_substring and replace_substring_regex, ARROW-10306). It is now possible to sort decimal and fixed-width binary data (ARROW-11662). The precision of the sum kernel was improved (ARROW-11758). CSV A CSV writer has been added (ARROW-2229). The CSV reader can now infer timestamp columns with fractional seconds (ARROW-12031). Dataset Arrow Datasets received various performance improvements and new features. Some highlights: New columns can be projected from arbitrary expressions at scan time (ARROW-11174) Read performance was improved for Parquet on high-latency filesystems (ARROW-11601) and in general when there are thousands of files or more (ARROW-8658) Null partition keys can be written (ARROW-10438) Compressed CSV files can be read (ARROW-10372) Filesystems support async operations (ARROW-10846) Usage and API documentation were added (ARROW-11677) Files and filesystems Fixed some rare instances of GZip files could not be read properly (ARROW-12169). Support for setting S3 proxy parameters has been added (ARROW-8900). The HDFS filesystem is now able to write more than 2GB of data at a time (ARROW-11391). IPC The IPC reader now supports reading data with dictionaries shared between different schema fields (ARROW-11838). The IPC reader now supports optional endian conversion when receiving IPC data represented with a different endianness. It is therefore possible to exchange Arrow data between systems with different endiannesses (ARROW-8797). The IPC file writer now optionally unifies dictionaries when writing a file in a single shot, instead of erroring out if unequal dictionaries are encountered (ARROW-10406). An interoperability issue with the C# implementation was fixed (ARROW-12100). JSON A possible crash when reading a line-separated JSON file has been fixed (ARROW-12065). ORC The Arrow C++ library now includes an ORC file writer. Hence it is possible to both read and write ORC files from/to Arrow data. Parquet The Parquet C++ library version is now synced with the Arrow version (ARROW-7830). Parquet DECIMAL statistics were previously calculated incorrectly, this has now been fixed (PARQUET-1655). Initial support for high-level Parquet encryption APIs similar to those in parquet-mr is available (ARROW-9318). C# notes Arrow Flight is now packaged for C#/.NET. Go notes The go implementation now supports IPC buffer compression Java notes Java now supports IPC buffer compression (ZSTD is recommended as the current performance of LZ4 is quite slow). JavaScript notes The Arrow JS module is now tree-shakeable. Iterating over Tables or Vectors is ~2X faster. Demo The default bundles use modern JS. Python notes Limited support for writing out CSV files (only types that have cast implementation to String) is now available. Writing parquet list types now has the option of enabling the canonical group naming according to the Parquet specification. The ORC Writer is now available. Creating a dataset with pyarrow.dataset.write_dataset is now possible from a Python iterator of record batches (ARROW-10882). The Dataset interface can now use custom projections using expressions when scanning (ARROW-11750). The expressions gained basic support for arithmetic operations (e.g. ds.field(&apos;a&apos;) / ds.field(&apos;b&apos;)) (ARROW-12058). See the Dataset docs for more details. See the C++ notes above for additional details. R notes The dplyr interface to Arrow data gained many new features in this release, including support for mutate(), relocate(), and more. You can also call in filter() or mutate() over 100 functions supported by the Arrow C++ library, and many string functions are available both by their base R (grepl(), gsub(), etc.) and stringr (str_detect(), str_replace()) spellings. Datasets can now read compressed CSVs automatically, and you can also open a dataset that is based on a single file, enabling you to use write_dataset() to partition a very large file without having to read the whole file into memory. For more on what’s in the 4.0.0 R package, see the R changelog. C GLib and Ruby notes C GLib In Arrow GLib version 4.0.0, the following changes are introduced in addition to the changes by Arrow C++. gandiva-glib supports filtering by using the newly introduced GGandivaFilter, GGandivaCondition, and GGandivaSelectableProjector The input property is added in GArrowCSVReader and GArrowJSONReader GNU Autotools, namely configure script, support is dropped GADScanContext is removed, and use_threads property is moved to GADScanOptions garrow_chunked_array_combine function is added garrow_array_concatenate function is added GADFragment and its subclass GADInMemoryFragment are added GADScanTask now holds the corresponding GADFragment gad_scan_options_replace_schema function is removed The name of Decimal128DataType is changed to decimal128 Ruby In Red Arrow version 4.0.0, the following changes are introduced in addition to the changes by Arrow GLib. ArrowDataset::ScanContext is removed, and use_threads attribute is moved to ArrowDataset::ScanOptions Arrow::Array#concatenate is added; it can concatenate not only an Arrow::Array but also a normal Array Arrow::SortKey and Arrow::SortOptions are added for accepting Ruby objects as sort key and options ArrowDataset::InMemoryFragment is added Rust notes This release of Arrow continues to add new features and performance improvements. Much of our time this release was spent hammering out the necessary details so we can release the Rust versions to cargo at a more regular rate. In addition, we welcomed the Ballista distributed compute project officially to the fold. Arrow Improved LargeUtf8 support Improved null handling in AND/OR kernels Added JSON writer support (ARROW-11310) JSON reader improvements LargeUTF8 Improved schema inference for nested list and struct types Various performance improvements IPC writer no longer calls finish() implicitly on drop Compute kernels Support for optional limit in sort kernel Divide by a single scalar Support for casting to timestamps Cast: Improved support between casting List, LargeList, Int32, Int64, Date64 Kernel to combine two arrays based on boolean mask Pow kernel new_null_array for creating Arrays full of nulls. Parquet Added support for filtering row groups (used by DataFusion to implement filter push-down) Added support for Parquet v 2.0 logical types DataFusion New Features SQL Support CTEs UNION HAVING EXTRACT SHOW TABLES SHOW COLUMNS INTERVAL SQL Information schema Support GROUP BY for more data types, including dictionary columns, boolean, Date32 Extensibility API Catalogs and schemas support Table deregistration Better support for multiple optimizers User defined functions can now provide specialized implementations for scalar values Physical Plans Hash Repartitioning SQL Metrics Additional Postgres compatible function library: Length functions Pad/trim functions Concat functions Ascii/Unicode functions Regex Proper identifier case identification (e.g. “Foo” vs Foo vs foo) Upgraded to Tokio 1.x Performance Improvements: LIMIT pushdown Constant folding Partitioned hash join Create hashes vectorized in hash join Improve parallelism using repartitioning pass Improved hash aggregate performance with large number of grouping values Predicate pushdown support for table scans Predicate push-down to parquet enables DataFusion to quickly eliminate entire parquet row-groups based on query filter expressions and parquet row group min/max statistics API Changes DataFrame methods now take Vec&amp;lt;Expr&amp;gt; rather than &amp;amp;[Expr] TableProvider now consistently uses Arc&amp;lt;TableProvider&amp;gt; rather than Box&amp;lt;TableProvider&amp;gt; Ballista Ballista was donated shortly before the Arrow 4.0.0 release and there is no new release of Ballista as part of Arrow 4.0.0</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://arrow.apache.org/img/arrow.png" /><media:content medium="image" url="https://arrow.apache.org/img/arrow.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Ballista: A Distributed Scheduler for Apache Arrow</title><link href="https://arrow.apache.org/blog/2021/04/12/ballista-donation/" rel="alternate" type="text/html" title="Ballista: A Distributed Scheduler for Apache Arrow" /><published>2021-04-12T02:00:00-04:00</published><updated>2021-04-12T02:00:00-04:00</updated><id>https://arrow.apache.org/blog/2021/04/12/ballista-donation</id><content type="html" xml:base="https://arrow.apache.org/blog/2021/04/12/ballista-donation/">&lt;!--

--&gt;

&lt;p&gt;We are excited to announce that &lt;a href=&quot;https://github.com/apache/arrow-datafusion/tree/master/ballista&quot;&gt;Ballista&lt;/a&gt; has been donated 
to the Apache Arrow project.&lt;/p&gt;

&lt;p&gt;Ballista is a distributed compute platform primarily implemented in Rust, and powered by Apache Arrow. It is built
on an architecture that allows other programming languages (such as Python, C++, and Java) to be supported as
first-class citizens without paying a penalty for serialization costs.&lt;/p&gt;

&lt;p&gt;The foundational technologies in Ballista are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://arrow.apache.org/&quot;&gt;Apache Arrow&lt;/a&gt; memory model and compute kernels for efficient processing of data.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/apache/arrow-datafusion&quot;&gt;Apache Arrow DataFusion&lt;/a&gt; query planning and 
execution framework, extended by Ballista to provide distributed planning and execution.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://arrow.apache.org/blog/2019/10/13/introducing-arrow-flight/&quot;&gt;Apache Arrow Flight Protocol&lt;/a&gt; for efficient
data transfer between processes.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developers.google.com/protocol-buffers&quot;&gt;Google Protocol Buffers&lt;/a&gt; for serializing query plans.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.docker.com/&quot;&gt;Docker&lt;/a&gt; for packaging up executors along with user-defined code.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ballista can be deployed as a standalone cluster and also supports &lt;a href=&quot;https://kubernetes.io/&quot;&gt;Kubernetes&lt;/a&gt;. In either
case, the scheduler can be configured to use &lt;a href=&quot;https://etcd.io/&quot;&gt;etcd&lt;/a&gt; as a backing store to (eventually) provide
redundancy in the case of a scheduler failing.&lt;/p&gt;

&lt;h2 id=&quot;status&quot;&gt;Status&lt;/h2&gt;

&lt;p&gt;The Ballista project is at an early stage of development. However, it is capable of running complex analytics queries 
in a distributed cluster with reasonable performance (comparable to more established distributed query frameworks).&lt;/p&gt;

&lt;p&gt;One of the benefits of Ballista being part of the Arrow codebase is that there is now an opportunity to push parts of 
the scheduler down to DataFusion so that is possible to seamlessly scale across cores in DataFusion, and across nodes 
in Ballista, using the same unified query scheduler.&lt;/p&gt;

&lt;h2 id=&quot;contributors-welcome&quot;&gt;Contributors Welcome!&lt;/h2&gt;

&lt;p&gt;If you are excited about being able to use Rust for distributed compute and ETL and would like to contribute to this 
work then there are many ways to get involved. The simplest way to get started is to try out Ballista against your own 
datasets and file bug reports for any issues that you find. You could also check out the current 
&lt;a href=&quot;https://issues.apache.org/jira/issues/?jql=project%20%3D%20ARROW%20AND%20component%20%3D%20%22Rust%20-%20Ballista%22&quot;&gt;list of issues&lt;/a&gt; and have a go at fixing one.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/apache/arrow/blob/master/rust/README.md#arrow-rust-community&quot;&gt;Arrow Rust Community&lt;/a&gt;
section of the Rust README provides information on other ways to interact with the Ballista contributors and 
maintainers.&lt;/p&gt;</content><author><name>agrove</name></author><category term="application" /><summary type="html">We are excited to announce that Ballista has been donated to the Apache Arrow project. Ballista is a distributed compute platform primarily implemented in Rust, and powered by Apache Arrow. It is built on an architecture that allows other programming languages (such as Python, C++, and Java) to be supported as first-class citizens without paying a penalty for serialization costs. The foundational technologies in Ballista are: Apache Arrow memory model and compute kernels for efficient processing of data. Apache Arrow DataFusion query planning and execution framework, extended by Ballista to provide distributed planning and execution. Apache Arrow Flight Protocol for efficient data transfer between processes. Google Protocol Buffers for serializing query plans. Docker for packaging up executors along with user-defined code. Ballista can be deployed as a standalone cluster and also supports Kubernetes. In either case, the scheduler can be configured to use etcd as a backing store to (eventually) provide redundancy in the case of a scheduler failing. Status The Ballista project is at an early stage of development. However, it is capable of running complex analytics queries in a distributed cluster with reasonable performance (comparable to more established distributed query frameworks). One of the benefits of Ballista being part of the Arrow codebase is that there is now an opportunity to push parts of the scheduler down to DataFusion so that is possible to seamlessly scale across cores in DataFusion, and across nodes in Ballista, using the same unified query scheduler. Contributors Welcome! If you are excited about being able to use Rust for distributed compute and ETL and would like to contribute to this work then there are many ways to get involved. The simplest way to get started is to try out Ballista against your own datasets and file bug reports for any issues that you find. You could also check out the current list of issues and have a go at fixing one. The Arrow Rust Community section of the Rust README provides information on other ways to interact with the Ballista contributors and maintainers.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://arrow.apache.org/img/arrow.png" /><media:content medium="image" url="https://arrow.apache.org/img/arrow.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Apache Arrow 3.0.0 Release</title><link href="https://arrow.apache.org/blog/2021/01/25/3.0.0-release/" rel="alternate" type="text/html" title="Apache Arrow 3.0.0 Release" /><published>2021-01-25T01:00:00-05:00</published><updated>2021-01-25T01:00:00-05:00</updated><id>https://arrow.apache.org/blog/2021/01/25/3.0.0-release</id><content type="html" xml:base="https://arrow.apache.org/blog/2021/01/25/3.0.0-release/">&lt;!--

--&gt;

&lt;p&gt;The Apache Arrow team is pleased to announce the 3.0.0 release. This covers
over 3 months of development work and includes &lt;a href=&quot;https://issues.apache.org/jira/issues/?jql=project%20%3D%20ARROW%20AND%20status%20%3D%20Resolved%20AND%20fixVersion%20%3D%203.0.0&quot;&gt;&lt;strong&gt;666 resolved issues&lt;/strong&gt;&lt;/a&gt;
from &lt;a href=&quot;/release/3.0.0.html#contributors&quot;&gt;&lt;strong&gt;106 distinct contributors&lt;/strong&gt;&lt;/a&gt;. See the Install Page to learn how to
get the libraries for your platform.&lt;/p&gt;

&lt;p&gt;The release notes below are not exhaustive and only expose selected highlights
of the release. Many other bugfixes and improvements have been made: we refer
you to the &lt;a href=&quot;/release/3.0.0.html&quot;&gt;complete changelog&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;columnar-format-notes&quot;&gt;Columnar Format Notes&lt;/h2&gt;

&lt;p&gt;The Decimal256 data type, which was already supported by the Arrow columnar
format specification, is now implemented in C++ and Java (ARROW-9747).&lt;/p&gt;

&lt;h2 id=&quot;arrow-flight-rpc-notes&quot;&gt;Arrow Flight RPC notes&lt;/h2&gt;

&lt;p&gt;Authentication in C++/Java/Python has been overhauled, allowing more flexible authentication methods and use of standard headers.
Support for cookies has also been added.
The C++/Java implementations are now more permissive when parsing messages in order to interoperate better with other Flight implementations.&lt;/p&gt;

&lt;p&gt;A basic Flight implementation for C#/.NET has been added.
See the &lt;a href=&quot;https://arrow.apache.org/docs/status.html#flight-rpc&quot;&gt;implementation status matrix&lt;/a&gt; for details.&lt;/p&gt;

&lt;h2 id=&quot;c-notes&quot;&gt;C++ notes&lt;/h2&gt;

&lt;p&gt;The default memory pool can now be changed at runtime using the environment
variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ARROW_DEFAULT_MEMORY_POOL&lt;/code&gt; (ARROW-11009).  The environment variable
is inspected at process startup.  This is useful when trying to diagnose memory
consumption issues with Arrow.&lt;/p&gt;

&lt;p&gt;STL-like iterators are now provided over concrete arrays. Those are useful for
non-performance critical tasks, for example testing (ARROW-10776).&lt;/p&gt;

&lt;p&gt;It is now possible to concatenate dictionary arrays with unequal dictionaries.
The dictionaries are unified when concatenating, for supported data types
(ARROW-5336).&lt;/p&gt;

&lt;p&gt;Threads in a thread pool are now spawned lazily as needed for enqueued
tasks, up to the configured capacity. They used to be spawned upfront on
creation of the thread pool (ARROW-10038).&lt;/p&gt;

&lt;h3 id=&quot;compute-layer&quot;&gt;Compute layer&lt;/h3&gt;

&lt;p&gt;Comprehensive documentation for compute functions is now available:
https://arrow.apache.org/docs/cpp/compute.html&lt;/p&gt;

&lt;p&gt;Compute functions for string processing have been added for:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;splitting on whitespace (ASCII and Unicode flavors) and splitting on a
pattern (ARROW-9991);&lt;/li&gt;
  &lt;li&gt;trimming characters (ARROW-9128).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Behavior of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index_in&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;is_in&lt;/code&gt; compute functions with nulls has been
changed for consistency (ARROW-10663).&lt;/p&gt;

&lt;p&gt;Multiple-column sort kernels are now available for tables and record batches
(ARROW-8199, ARROW-10796, ARROW-10790).&lt;/p&gt;

&lt;p&gt;Performance of table filtering has been vastly improved (ARROW-10569).&lt;/p&gt;

&lt;p&gt;Scalar arguments are now accepted for more compute functions.&lt;/p&gt;

&lt;p&gt;Compute functions &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;quantile&lt;/code&gt; (ARROW-10831) and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;is_nan&lt;/code&gt; (ARROW-11043) have been
added for numeric data.&lt;/p&gt;

&lt;p&gt;Aggregation functions &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;any&lt;/code&gt; (ARROW-1846) and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;all&lt;/code&gt; (ARROW-10301) have been
added for boolean data.&lt;/p&gt;

&lt;h3 id=&quot;dataset&quot;&gt;Dataset&lt;/h3&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Expression&lt;/code&gt; hierarchy has simplified to a wrapper around literals, field references,
or calls to named functions. This enables usage of any compute function while filtering
with no boilerplate.&lt;/p&gt;

&lt;p&gt;Parquet statistics are lazily parsed in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ParquetDatasetFactory&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ParquetFileFragment&lt;/code&gt; for shorter construction time.&lt;/p&gt;

&lt;h3 id=&quot;csv&quot;&gt;CSV&lt;/h3&gt;

&lt;p&gt;Conversion of string columns is now faster thanks to faster UTF-8 validation
of small strings (ARROW-10313).&lt;/p&gt;

&lt;p&gt;Conversion of floating-point columns is now faster thanks to optimized
string-to-double conversion routines (ARROW-10328).&lt;/p&gt;

&lt;p&gt;Parsing of ISO8601 timestamps is now more liberal: trailing zeros can
be omitted in the fractional part (ARROW-10337).&lt;/p&gt;

&lt;p&gt;Fixed a bug where null detection could give the wrong results on some platforms
(ARROW-11067).&lt;/p&gt;

&lt;p&gt;Added type inference for Date32 columns for values in the form &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YYYY-MM-DD&lt;/code&gt;
(ARROW-11247).&lt;/p&gt;

&lt;h3 id=&quot;feather&quot;&gt;Feather&lt;/h3&gt;

&lt;p&gt;Fixed reading of compressed Feather files written with Arrow 0.17 (ARROW-11163).&lt;/p&gt;

&lt;h3 id=&quot;filesystem-layer&quot;&gt;Filesystem layer&lt;/h3&gt;

&lt;p&gt;S3 recursive tree walks now benefit from a parallel implementation, where reads
of multiple child directories are now issued concurrently (ARROW-10788).&lt;/p&gt;

&lt;p&gt;Improved empty directory detection to be mindful of differences between Amazon
and Minio S3 implementations (ARROW-10942).&lt;/p&gt;

&lt;h3 id=&quot;flight-rpc&quot;&gt;Flight RPC&lt;/h3&gt;

&lt;p&gt;IPv6 host addresses are now supported (ARROW-10475).&lt;/p&gt;

&lt;h3 id=&quot;ipc&quot;&gt;IPC&lt;/h3&gt;

&lt;p&gt;It is now possible to emit dictionary deltas where possible using the IPC
stream writer. This is governed by a new variable in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IpcWriteOptions&lt;/code&gt; class
(ARROW-6883).&lt;/p&gt;

&lt;p&gt;It is now possible to read wider tables, which used to fail due to reaching a
limit during Flatbuffers verification (ARROW-10056).&lt;/p&gt;

&lt;h3 id=&quot;parquet&quot;&gt;Parquet&lt;/h3&gt;

&lt;p&gt;Fixed reading of LZ4-compressed Parquet columns emitted by the Java Parquet
implementation (ARROW-11301).&lt;/p&gt;

&lt;p&gt;Fixed a bug where writing multiple batches of nullable nested strings to Parquet
would not write any data in batches after the first one (ARROW-10493)&lt;/p&gt;

&lt;p&gt;The Decimal256 data type can be read from and written to Parquet (ARROW-10607).&lt;/p&gt;

&lt;p&gt;LargeString and LargeBinary data can now be written to Parquet (ARROW-10426).&lt;/p&gt;

&lt;h2 id=&quot;c-notes-1&quot;&gt;C# notes&lt;/h2&gt;

&lt;p&gt;The .NET package added initial support for Arrow Flight clients and servers. Support is enabled through two new NuGet packages &lt;a href=&quot;https://www.nuget.org/packages/Apache.Arrow.Flight/&quot;&gt;Apache.Arrow.Flight&lt;/a&gt; (client) and &lt;a href=&quot;https://www.nuget.org/packages/Apache.Arrow.Flight.AspNetCore/&quot;&gt;Apache.Arrow.Flight.AspNetCore&lt;/a&gt; (server).&lt;/p&gt;

&lt;p&gt;Also fixed an issue where ArrowStreamWriter wasn’t writing schema metadata to Arrow streams.&lt;/p&gt;

&lt;h2 id=&quot;julia-notes&quot;&gt;Julia notes&lt;/h2&gt;

&lt;p&gt;This is the first release to officially include
&lt;a href=&quot;https://github.com/apache/arrow/tree/master/julia/Arrow&quot;&gt;an implementation&lt;/a&gt;
for the Julia language. The pure Julia implementation includes support
for &lt;a href=&quot;https://arrow.apache.org/docs/status.html&quot;&gt;wide coverage of the format specification&lt;/a&gt;.
Additional details can be found in the
&lt;a href=&quot;https://julialang.org/blog/2021/01/arrow/&quot;&gt;julialang.org blog post&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;python-notes&quot;&gt;Python notes&lt;/h2&gt;

&lt;p&gt;Support for Python 3.9 was added (ARROW-10224), and support for Python 3.5
was removed (ARROW-5679).&lt;/p&gt;

&lt;p&gt;Support for building manylinux1 packages has been removed (ARROW-11212).
PyArrow continues to be available as manylinux2010 and manylinux2014 wheels.&lt;/p&gt;

&lt;p&gt;The minimal required version for NumPy is now 1.16.6. Note that when upgrading
NumPy to 1.20, you also need to upgrade pyarrow to 3.0.0 to ensure compatibility,
as this pyarrow release fixed a compatibility issue with NumPy 1.20 (ARROW-10833).&lt;/p&gt;

&lt;p&gt;Compute functions are now automatically exported from C++ to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pyarrow.compute&lt;/code&gt;
module, and they have docstrings matching their C++ definition.&lt;/p&gt;

&lt;p&gt;An &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iter_batches()&lt;/code&gt; method is now available for reading a Parquet file iteratively
(ARROW-7800).&lt;/p&gt;

&lt;p&gt;Alternate memory pools (such as mimalloc, jemalloc or the C malloc-based memory
pool) are now available from Python (ARROW-11049).&lt;/p&gt;

&lt;p&gt;Fixed a potential deadlock when importing pandas from several threads (ARROW-10519).&lt;/p&gt;

&lt;p&gt;See the C++ notes above for additional details.&lt;/p&gt;

&lt;h2 id=&quot;r-notes&quot;&gt;R notes&lt;/h2&gt;

&lt;p&gt;This release contains new features for the Flight RPC wrapper, better
support for saving R metadata (including &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sf&lt;/code&gt; spatial data) to Feather and
Parquet files, several significant improvements to speed and memory management,
and many other enhancements.&lt;/p&gt;

&lt;p&gt;For more on what’s in the 3.0.0 R package, see the &lt;a href=&quot;/docs/r/news/&quot;&gt;R changelog&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;ruby-and-c-glib-notes&quot;&gt;Ruby and C GLib notes&lt;/h2&gt;

&lt;h3 id=&quot;ruby&quot;&gt;Ruby&lt;/h3&gt;

&lt;p&gt;In Ruby binding, 256-bit decimal support and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arrow::FixedBinaryArrayBuilder&lt;/code&gt; are added likewise C GLib below.&lt;/p&gt;

&lt;h3 id=&quot;c-glib&quot;&gt;C GLib&lt;/h3&gt;

&lt;p&gt;In the version 3.0.0 of C GLib consists of many new features.&lt;/p&gt;

&lt;p&gt;A chunked array, a record batch, and a table support &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sort_indices&lt;/code&gt; function as well as an array.
These functions including array’s support to specify sorting option.
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;garrow_array_sort_to_indices&lt;/code&gt; has been renamed to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;garrow_array_sort_indices&lt;/code&gt; and the previous name has been deprecated.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GArrowField&lt;/code&gt; supports functions to handle metadata.
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GArrowSchema&lt;/code&gt; supports &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;garrow_schema_has_metadata()&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GArrowArrayBuilder&lt;/code&gt; supports to add single null, multiple nulls, single empty value, and multiple empty values.
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GArrowFixedSizedBinaryArrayBuilder&lt;/code&gt; is newly supported.&lt;/p&gt;

&lt;p&gt;256-bit decimal and extension types are newly supported.
Filesystem module supports Mock, HDFS, S3 file systems.
Dataset module supports CSV, IPC, and Parquet file formats.&lt;/p&gt;

&lt;h2 id=&quot;rust-notes&quot;&gt;Rust notes&lt;/h2&gt;
&lt;h3 id=&quot;core-arrow-crate&quot;&gt;Core Arrow Crate&lt;/h3&gt;

&lt;p&gt;The development of the arrow crate was focused on four main aspects:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Make the crate usable in stable Rust&lt;/li&gt;
  &lt;li&gt;Bug fixing and removal of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unsafe&lt;/code&gt; code&lt;/li&gt;
  &lt;li&gt;Extend functionality to keep up with the specification&lt;/li&gt;
  &lt;li&gt;Increase performance of existing kernels&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;stable-rust&quot;&gt;Stable Rust&lt;/h4&gt;

&lt;p&gt;Possibly the biggest news for this release is that all project crates, including arrow, parquet, and datafusion now
build with stable Rust by default. Nightly / unstable Rust is still required when enabling the SIMD feature.&lt;/p&gt;

&lt;h4 id=&quot;parquet-arrow-writer&quot;&gt;Parquet Arrow writer&lt;/h4&gt;

&lt;p&gt;The Parquet Writer for Arrow arrays is now available, allowing the Rust programs to easily read and write Parquet
files and making it easier to integrate with the overall Arrow ecosystem. The reader and writer include both basic
and nested type support (List, Dictionary, Struct)&lt;/p&gt;

&lt;h4 id=&quot;first-class-arrow-flight-ipc-support&quot;&gt;First Class Arrow Flight IPC Support&lt;/h4&gt;

&lt;p&gt;This release the Arrow Flight IPC implementation in Rust became fully-featured enough to participate in the regular
cross-language integration tests, thus ensuring Rust applications written using Arrow can interoperate with the rest
of the ecosystem&lt;/p&gt;

&lt;h4 id=&quot;performance&quot;&gt;Performance&lt;/h4&gt;

&lt;p&gt;There have been numerous performance improvements in this release across the board. This includes both kernel
operations, such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;take&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;filter&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cast&lt;/code&gt;, as well as more fundamental parts such as bitwise comparison
and reading and writing to CSV.&lt;/p&gt;

&lt;h4 id=&quot;increased-data-type-support&quot;&gt;Increased Data Type Support&lt;/h4&gt;

&lt;p&gt;New DataTypes:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Decimal data type for fixed-width decimal values&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Improved operation support for nested structures Dictionary, and Lists (filter, take, etc)&lt;/p&gt;

&lt;h4 id=&quot;other-improvements&quot;&gt;Other improvements:&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Added support for Date and time on FFI&lt;/li&gt;
  &lt;li&gt;Added support for Binary type on FFI&lt;/li&gt;
  &lt;li&gt;Added support for i64 sized arrays to “take” kernel&lt;/li&gt;
  &lt;li&gt;Support for the i128 Decimal Type&lt;/li&gt;
  &lt;li&gt;Added support to cast string to date&lt;/li&gt;
  &lt;li&gt;Added API to create arrays out of existing arrays (e.g. for join, merge-sort, concatenate)&lt;/li&gt;
  &lt;li&gt;The simd feature is now also available on aarch64&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;api-changes&quot;&gt;API Changes&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;BooleanArray is no longer a PrimitiveArray&lt;/li&gt;
  &lt;li&gt;ArrowNativeType no longer includes bool since arrows boolean type is represented using bitpacking&lt;/li&gt;
  &lt;li&gt;Several Buffer methods are now infallible instead of returning a Result&lt;/li&gt;
  &lt;li&gt;DataType::List now contains a Field to track metadata about the contained elements&lt;/li&gt;
  &lt;li&gt;PrimitiveArray::raw_values, values_slice and values methods got replaced by a values method returning a slice&lt;/li&gt;
  &lt;li&gt;Buffer::data and raw_data were renamed to as_slice and as_ptr&lt;/li&gt;
  &lt;li&gt;MutableBuffer::data_mut and freeze were renamed to as_slice_mut and into to be more consistent with the stdlib naming conventions&lt;/li&gt;
  &lt;li&gt;The generic type parameter for BufferBuilder was changed from ArrowPrimitiveType to ArrowNativeType&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;datafusion&quot;&gt;DataFusion&lt;/h3&gt;

&lt;h4 id=&quot;sql&quot;&gt;SQL&lt;/h4&gt;

&lt;p&gt;In this release, we clarified that DataFusion will standardize on the PostgreSQL SQL dialect.&lt;/p&gt;

&lt;p&gt;New SQL support:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;JOIN, LEFT JOIN, RIGHT JOIN&lt;/li&gt;
  &lt;li&gt;COUNT DISTINCT&lt;/li&gt;
  &lt;li&gt;CASE WHEN&lt;/li&gt;
  &lt;li&gt;USING&lt;/li&gt;
  &lt;li&gt;BETWEEN&lt;/li&gt;
  &lt;li&gt;IS IN&lt;/li&gt;
  &lt;li&gt;Nested SELECT statements&lt;/li&gt;
  &lt;li&gt;Nested expressions in aggregations&lt;/li&gt;
  &lt;li&gt;LOWER(), UPPER(), TRIM()&lt;/li&gt;
  &lt;li&gt;NULLIF()&lt;/li&gt;
  &lt;li&gt;SHA224(), SHA256(), SHA384(), SHA512()&lt;/li&gt;
  &lt;li&gt;DATE_TRUNC()&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;performance-1&quot;&gt;Performance&lt;/h4&gt;

&lt;p&gt;There have been numerous performance improvements in this release:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Optimizations for JOINs such as using vectorized hashing.&lt;/li&gt;
  &lt;li&gt;We started with adding statistics and cost-based optimizations. We choose the smaller side of a join as the build
side if possible.&lt;/li&gt;
  &lt;li&gt;Improved parallelism when reading partitioned Parquet data sources&lt;/li&gt;
  &lt;li&gt;Concurrent writes of CSV and Parquet partitions to file&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;parquet-crate&quot;&gt;Parquet Crate&lt;/h3&gt;

&lt;p&gt;The Parquet has the following improvements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Nested reading&lt;/li&gt;
  &lt;li&gt;Support to write booleans&lt;/li&gt;
  &lt;li&gt;Add support to write temporal types&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;roadmap-for-400&quot;&gt;Roadmap for 4.0.0&lt;/h3&gt;

&lt;p&gt;We have also started building up a shared community roadmap for 4.0: &lt;a href=&quot;https://docs.google.com/document/d/1qspsOM_dknOxJKdGvKbC1aoVoO0M3i6x1CIo58mmN2Y/edit#heading=h.kstb571j5g5j&quot;&gt;Apache Arrow: Crowd Sourced Rust Roadmap for
Arrow 4.0, January 2021&lt;/a&gt;.&lt;/p&gt;</content><author><name>pmc</name></author><category term="release" /><summary type="html">The Apache Arrow team is pleased to announce the 3.0.0 release. This covers over 3 months of development work and includes 666 resolved issues from 106 distinct contributors. See the Install Page to learn how to get the libraries for your platform. The release notes below are not exhaustive and only expose selected highlights of the release. Many other bugfixes and improvements have been made: we refer you to the complete changelog. Columnar Format Notes The Decimal256 data type, which was already supported by the Arrow columnar format specification, is now implemented in C++ and Java (ARROW-9747). Arrow Flight RPC notes Authentication in C++/Java/Python has been overhauled, allowing more flexible authentication methods and use of standard headers. Support for cookies has also been added. The C++/Java implementations are now more permissive when parsing messages in order to interoperate better with other Flight implementations. A basic Flight implementation for C#/.NET has been added. See the implementation status matrix for details. C++ notes The default memory pool can now be changed at runtime using the environment variable ARROW_DEFAULT_MEMORY_POOL (ARROW-11009). The environment variable is inspected at process startup. This is useful when trying to diagnose memory consumption issues with Arrow. STL-like iterators are now provided over concrete arrays. Those are useful for non-performance critical tasks, for example testing (ARROW-10776). It is now possible to concatenate dictionary arrays with unequal dictionaries. The dictionaries are unified when concatenating, for supported data types (ARROW-5336). Threads in a thread pool are now spawned lazily as needed for enqueued tasks, up to the configured capacity. They used to be spawned upfront on creation of the thread pool (ARROW-10038). Compute layer Comprehensive documentation for compute functions is now available: https://arrow.apache.org/docs/cpp/compute.html Compute functions for string processing have been added for: splitting on whitespace (ASCII and Unicode flavors) and splitting on a pattern (ARROW-9991); trimming characters (ARROW-9128). Behavior of the index_in and is_in compute functions with nulls has been changed for consistency (ARROW-10663). Multiple-column sort kernels are now available for tables and record batches (ARROW-8199, ARROW-10796, ARROW-10790). Performance of table filtering has been vastly improved (ARROW-10569). Scalar arguments are now accepted for more compute functions. Compute functions quantile (ARROW-10831) and is_nan (ARROW-11043) have been added for numeric data. Aggregation functions any (ARROW-1846) and all (ARROW-10301) have been added for boolean data. Dataset The Expression hierarchy has simplified to a wrapper around literals, field references, or calls to named functions. This enables usage of any compute function while filtering with no boilerplate. Parquet statistics are lazily parsed in ParquetDatasetFactory and ParquetFileFragment for shorter construction time. CSV Conversion of string columns is now faster thanks to faster UTF-8 validation of small strings (ARROW-10313). Conversion of floating-point columns is now faster thanks to optimized string-to-double conversion routines (ARROW-10328). Parsing of ISO8601 timestamps is now more liberal: trailing zeros can be omitted in the fractional part (ARROW-10337). Fixed a bug where null detection could give the wrong results on some platforms (ARROW-11067). Added type inference for Date32 columns for values in the form YYYY-MM-DD (ARROW-11247). Feather Fixed reading of compressed Feather files written with Arrow 0.17 (ARROW-11163). Filesystem layer S3 recursive tree walks now benefit from a parallel implementation, where reads of multiple child directories are now issued concurrently (ARROW-10788). Improved empty directory detection to be mindful of differences between Amazon and Minio S3 implementations (ARROW-10942). Flight RPC IPv6 host addresses are now supported (ARROW-10475). IPC It is now possible to emit dictionary deltas where possible using the IPC stream writer. This is governed by a new variable in the IpcWriteOptions class (ARROW-6883). It is now possible to read wider tables, which used to fail due to reaching a limit during Flatbuffers verification (ARROW-10056). Parquet Fixed reading of LZ4-compressed Parquet columns emitted by the Java Parquet implementation (ARROW-11301). Fixed a bug where writing multiple batches of nullable nested strings to Parquet would not write any data in batches after the first one (ARROW-10493) The Decimal256 data type can be read from and written to Parquet (ARROW-10607). LargeString and LargeBinary data can now be written to Parquet (ARROW-10426). C# notes The .NET package added initial support for Arrow Flight clients and servers. Support is enabled through two new NuGet packages Apache.Arrow.Flight (client) and Apache.Arrow.Flight.AspNetCore (server). Also fixed an issue where ArrowStreamWriter wasn’t writing schema metadata to Arrow streams. Julia notes This is the first release to officially include an implementation for the Julia language. The pure Julia implementation includes support for wide coverage of the format specification. Additional details can be found in the julialang.org blog post. Python notes Support for Python 3.9 was added (ARROW-10224), and support for Python 3.5 was removed (ARROW-5679). Support for building manylinux1 packages has been removed (ARROW-11212). PyArrow continues to be available as manylinux2010 and manylinux2014 wheels. The minimal required version for NumPy is now 1.16.6. Note that when upgrading NumPy to 1.20, you also need to upgrade pyarrow to 3.0.0 to ensure compatibility, as this pyarrow release fixed a compatibility issue with NumPy 1.20 (ARROW-10833). Compute functions are now automatically exported from C++ to the pyarrow.compute module, and they have docstrings matching their C++ definition. An iter_batches() method is now available for reading a Parquet file iteratively (ARROW-7800). Alternate memory pools (such as mimalloc, jemalloc or the C malloc-based memory pool) are now available from Python (ARROW-11049). Fixed a potential deadlock when importing pandas from several threads (ARROW-10519). See the C++ notes above for additional details. R notes This release contains new features for the Flight RPC wrapper, better support for saving R metadata (including sf spatial data) to Feather and Parquet files, several significant improvements to speed and memory management, and many other enhancements. For more on what’s in the 3.0.0 R package, see the R changelog. Ruby and C GLib notes Ruby In Ruby binding, 256-bit decimal support and Arrow::FixedBinaryArrayBuilder are added likewise C GLib below. C GLib In the version 3.0.0 of C GLib consists of many new features. A chunked array, a record batch, and a table support sort_indices function as well as an array. These functions including array’s support to specify sorting option. garrow_array_sort_to_indices has been renamed to garrow_array_sort_indices and the previous name has been deprecated. GArrowField supports functions to handle metadata. GArrowSchema supports garrow_schema_has_metadata() function. GArrowArrayBuilder supports to add single null, multiple nulls, single empty value, and multiple empty values. GArrowFixedSizedBinaryArrayBuilder is newly supported. 256-bit decimal and extension types are newly supported. Filesystem module supports Mock, HDFS, S3 file systems. Dataset module supports CSV, IPC, and Parquet file formats. Rust notes Core Arrow Crate The development of the arrow crate was focused on four main aspects: Make the crate usable in stable Rust Bug fixing and removal of unsafe code Extend functionality to keep up with the specification Increase performance of existing kernels Stable Rust Possibly the biggest news for this release is that all project crates, including arrow, parquet, and datafusion now build with stable Rust by default. Nightly / unstable Rust is still required when enabling the SIMD feature. Parquet Arrow writer The Parquet Writer for Arrow arrays is now available, allowing the Rust programs to easily read and write Parquet files and making it easier to integrate with the overall Arrow ecosystem. The reader and writer include both basic and nested type support (List, Dictionary, Struct) First Class Arrow Flight IPC Support This release the Arrow Flight IPC implementation in Rust became fully-featured enough to participate in the regular cross-language integration tests, thus ensuring Rust applications written using Arrow can interoperate with the rest of the ecosystem Performance There have been numerous performance improvements in this release across the board. This includes both kernel operations, such as take, filter, and cast, as well as more fundamental parts such as bitwise comparison and reading and writing to CSV. Increased Data Type Support New DataTypes: Decimal data type for fixed-width decimal values Improved operation support for nested structures Dictionary, and Lists (filter, take, etc) Other improvements: Added support for Date and time on FFI Added support for Binary type on FFI Added support for i64 sized arrays to “take” kernel Support for the i128 Decimal Type Added support to cast string to date Added API to create arrays out of existing arrays (e.g. for join, merge-sort, concatenate) The simd feature is now also available on aarch64 API Changes BooleanArray is no longer a PrimitiveArray ArrowNativeType no longer includes bool since arrows boolean type is represented using bitpacking Several Buffer methods are now infallible instead of returning a Result DataType::List now contains a Field to track metadata about the contained elements PrimitiveArray::raw_values, values_slice and values methods got replaced by a values method returning a slice Buffer::data and raw_data were renamed to as_slice and as_ptr MutableBuffer::data_mut and freeze were renamed to as_slice_mut and into to be more consistent with the stdlib naming conventions The generic type parameter for BufferBuilder was changed from ArrowPrimitiveType to ArrowNativeType DataFusion SQL In this release, we clarified that DataFusion will standardize on the PostgreSQL SQL dialect. New SQL support: JOIN, LEFT JOIN, RIGHT JOIN COUNT DISTINCT CASE WHEN USING BETWEEN IS IN Nested SELECT statements Nested expressions in aggregations LOWER(), UPPER(), TRIM() NULLIF() SHA224(), SHA256(), SHA384(), SHA512() DATE_TRUNC() Performance There have been numerous performance improvements in this release: Optimizations for JOINs such as using vectorized hashing. We started with adding statistics and cost-based optimizations. We choose the smaller side of a join as the build side if possible. Improved parallelism when reading partitioned Parquet data sources Concurrent writes of CSV and Parquet partitions to file Parquet Crate The Parquet has the following improvements: Nested reading Support to write booleans Add support to write temporal types Roadmap for 4.0.0 We have also started building up a shared community roadmap for 4.0: Apache Arrow: Crowd Sourced Rust Roadmap for Arrow 4.0, January 2021.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://arrow.apache.org/img/arrow.png" /><media:content medium="image" url="https://arrow.apache.org/img/arrow.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Apache Arrow 2.0.0 Rust Highlights</title><link href="https://arrow.apache.org/blog/2020/10/27/rust-2.0.0-release/" rel="alternate" type="text/html" title="Apache Arrow 2.0.0 Rust Highlights" /><published>2020-10-27T02:00:00-04:00</published><updated>2020-10-27T02:00:00-04:00</updated><id>https://arrow.apache.org/blog/2020/10/27/rust-2.0.0-release</id><content type="html" xml:base="https://arrow.apache.org/blog/2020/10/27/rust-2.0.0-release/">&lt;!--

--&gt;

&lt;p&gt;Apache Arrow 2.0.0 is a significant release for the Apache Arrow project in general (&lt;a href=&quot;https://arrow.apache.org/blog/2020/10/22/2.0.0-release/&quot;&gt;release notes&lt;/a&gt;), and the Rust subproject
in particular, with almost 200 issues resolved by 15 contributors. In this blog post, we will go through the main changes 
affecting core Arrow, Parquet support, and DataFusion query engine. The full list of resolved issues can be found 
&lt;a href=&quot;https://issues.apache.org/jira/browse/ARROW-10295?jql=project%20%3D%20ARROW%20AND%20status%20not%20in%20%20(Open%2C%20%22In%20Progress%22%2C%20Reopened)%20and%20fixVersion%20%3D%202.0.0%20AND%20text%20~%20rust%20ORDER%20BY%20created%20DESC&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;While the Java and C/C++ (used by Python and R) Arrow implementations likely remain the most feature-rich, with the 
2.0.0 release, the Rust implementation is closing the feature gap quickly. Here are some of the highlights for this 
release.&lt;/p&gt;

&lt;h1 id=&quot;core-arrow-crate&quot;&gt;Core Arrow Crate&lt;/h1&gt;

&lt;h2 id=&quot;iterator-trait&quot;&gt;Iterator Trait&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Primitive arrays (e.g., array of integers) can now be converted to and initialized from an iterator. This exposes a 
very popular API - iterators - to arrow arrays. Work for other types will continue throughout 3.0.0.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;improved-variable-sized-arrays&quot;&gt;Improved Variable-sized Arrays&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Variable sized arrays (e.g., array of strings) have been internally refactored to more easily support their larger (64-bit 
size offset) version. This allowed us to generalize some of the kernels to both (32 and 64) versions and 
perform type checks when building them.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;kernels&quot;&gt;Kernels&lt;/h2&gt;

&lt;p&gt;There have been numerous improvements in the Arrow compute kernels, including:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;New kernels have been added for string operations, including substring, min, max, concat, and length.&lt;/li&gt;
  &lt;li&gt;Aggregate sum is now implemented for SIMD with a 5x improvement over the non-SIMD operation&lt;/li&gt;
  &lt;li&gt;Many kernels have been improved to support dictionary-encoded arrays&lt;/li&gt;
  &lt;li&gt;Some kernels were optimized for arrays without nulls, making them significantly faster in that case.&lt;/li&gt;
  &lt;li&gt;Many kernels were optimized in the number of memory copies that are needed to apply them and also on their 
implementation.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;other-improvements&quot;&gt;Other Improvements&lt;/h2&gt;

&lt;p&gt;The Array trait now has &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get_buffer_memory_size&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get_array_memory_size&lt;/code&gt; methods for determining the amount of 
memory allocated for the array.&lt;/p&gt;

&lt;h1 id=&quot;parquet&quot;&gt;Parquet&lt;/h1&gt;

&lt;p&gt;A significant effort is underway to create a Parquet writer for Arrow data. This work has not been released as part of 
2.0.0, and is planned for the 3.0.0 release. The development of this writer is being carried out on the 
&lt;a href=&quot;https://github.com/apache/arrow/tree/rust-parquet-arrow-writer&quot;&gt;rust-parquet-arrow-writer&lt;/a&gt; branch, and the branch is regularly synchronized with the main branch.
As part of the writer, the necessary improvements and features are being added to the reader.&lt;/p&gt;

&lt;p&gt;The main focus areas are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Supporting nested Arrow types, such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;List&amp;lt;Struct&amp;lt;[Dictionary, String]&amp;gt;&amp;gt;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Ensuring correct round-trip between the reader and writer by encoding Arrow schemas in the Parquet metadata&lt;/li&gt;
  &lt;li&gt;Improve null value writing for Parquet&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parquet_derive&lt;/code&gt; crate has been created, which allows users to derive Parquet records for simple structs. Refer to 
the &lt;a href=&quot;https://github.com/apache/arrow-rs/tree/master/parquet_derive&quot;&gt;parquet_derive crate&lt;/a&gt; for usage examples.&lt;/p&gt;

&lt;h1 id=&quot;datafusion&quot;&gt;DataFusion&lt;/h1&gt;

&lt;p&gt;DataFusion is an in-memory query engine with DataFrame and SQL APIs, built on top of base Arrow support.&lt;/p&gt;

&lt;h2 id=&quot;dataframe-api&quot;&gt;DataFrame API&lt;/h2&gt;

&lt;p&gt;DataFusion now has a richer &lt;a href=&quot;https://docs.rs/datafusion/2.0.0/datafusion/dataframe/trait.DataFrame.html&quot;&gt;DataFrame API&lt;/a&gt; with improved documentation showing example usage, 
supporting the following operations:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;select_columns&lt;/li&gt;
  &lt;li&gt;select&lt;/li&gt;
  &lt;li&gt;filter&lt;/li&gt;
  &lt;li&gt;aggregate&lt;/li&gt;
  &lt;li&gt;limit&lt;/li&gt;
  &lt;li&gt;sort&lt;/li&gt;
  &lt;li&gt;collect&lt;/li&gt;
  &lt;li&gt;explain&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;performance--scalability&quot;&gt;Performance &amp;amp; Scalability&lt;/h2&gt;

&lt;p&gt;DataFusion query execution now uses &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;async&lt;/code&gt;/&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;await&lt;/code&gt; with the tokio threaded runtime rather than launching dedicated 
threads, making queries scale much better across available cores.&lt;/p&gt;

&lt;p&gt;The hash aggregate physical operator has been largely re-written, resulting in significant performance improvements.&lt;/p&gt;

&lt;h2 id=&quot;expressions-and-compute&quot;&gt;Expressions and Compute&lt;/h2&gt;

&lt;h3 id=&quot;improved-scalar-functions&quot;&gt;Improved Scalar Functions&lt;/h3&gt;

&lt;p&gt;DataFusion has many new functions, both in the SQL and the DataFrame API:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Length of an string&lt;/li&gt;
  &lt;li&gt;COUNT(DISTINCT column)&lt;/li&gt;
  &lt;li&gt;to_timestamp&lt;/li&gt;
  &lt;li&gt;IsNull and IsNotNull&lt;/li&gt;
  &lt;li&gt;Min/Max for strings (lexicographic order)&lt;/li&gt;
  &lt;li&gt;Array of columns&lt;/li&gt;
  &lt;li&gt;Concatenation of strings&lt;/li&gt;
  &lt;li&gt;Aliases of aggregate expressions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Many existing expressions were also significantly optimized (2-3x speedups) by avoiding memory copies and leveraging 
Arrow format’s invariants.&lt;/p&gt;

&lt;p&gt;Unary mathematical functions (such as sqrt) now support both 32 and 64-bit floats and return the corresponding type, 
thereby allowing faster operations when higher precision is not needed.&lt;/p&gt;

&lt;h3 id=&quot;improved-user-defined-functions-udfs&quot;&gt;Improved User-defined Functions (UDFs)&lt;/h3&gt;
&lt;p&gt;The API to use and register UDFs has been significantly improved, allowing users to register UDFs and call them both 
via SQL and the DataFrame API. UDFs now also have the same generality as DataFusion’s functions, including variadic 
and dynamically typed arguments.&lt;/p&gt;

&lt;h3 id=&quot;user-defined-aggregate-functions-udafs&quot;&gt;User-defined Aggregate Functions (UDAFs)&lt;/h3&gt;
&lt;p&gt;DataFusion now supports user-defined aggregate functions that can be used to perform operations than span multiple 
rows, batches, and partitions. UDAFs have the same generality as DataFusion’s functions and support both row updates 
and batch updates. You can check out &lt;a href=&quot;https://github.com/apache/arrow-datafusion/blob/master/datafusion-examples/examples/simple_udaf.rs&quot;&gt;this example&lt;/a&gt; to learn how to declare and use a UDAF.&lt;/p&gt;

&lt;h3 id=&quot;user-defined-constants&quot;&gt;User-defined Constants&lt;/h3&gt;
&lt;p&gt;DataFusion now supports registering constants (e.g. “@version”) that live for the duration of the execution context 
and can be accessed from SQL.&lt;/p&gt;

&lt;h2 id=&quot;query-planning--optimization&quot;&gt;Query Planning &amp;amp; Optimization&lt;/h2&gt;

&lt;h3 id=&quot;user-defined-logical-plans&quot;&gt;User-defined logical plans&lt;/h3&gt;

&lt;p&gt;The Logical Plan enum is now extensible through an Extension variant which accepts a UserDefinedLogicalPlan trait using 
dynamic dispatch. Consequently, DataFusion now supports user-defined logical nodes, thereby allowing complex nodes to 
be planned and executed. You can check this example to learn how to declare a new node.&lt;/p&gt;

&lt;h3 id=&quot;predicate-push-down&quot;&gt;Predicate push-down&lt;/h3&gt;

&lt;p&gt;DataFusion now has a Predicate push-down optimizer rule that pushes filter operations as close as possible to scans, 
thereby speeding up the physical execution of suboptimal queries created via the DataFrame API.&lt;/p&gt;

&lt;h3 id=&quot;sql&quot;&gt;SQL&lt;/h3&gt;

&lt;p&gt;DataFusion now uses a more recent release of the sqlparser crate, which has much more comprehensive support for SQL 
syntax and also supports multiple dialects (Postgres, MS SQL, and MySQL).&lt;/p&gt;

&lt;p&gt;It is now possible to see the query plan for a SQL statement using EXPLAIN syntax.&lt;/p&gt;

&lt;h1 id=&quot;benchmarks&quot;&gt;Benchmarks&lt;/h1&gt;

&lt;p&gt;The benchmark crate now contains a new benchmark based on TPC-H that can execute TPC-H query 1 against CSV, Parquet, 
and memory data sources. This is useful for running benchmarks against larger data sets.&lt;/p&gt;

&lt;h1 id=&quot;integration-testing--ipc&quot;&gt;Integration Testing / IPC&lt;/h1&gt;

&lt;p&gt;Arrow IPC is the format for serialization and interprocess communication. It is described in &lt;a href=&quot;https://arrow.apache.org/&quot;&gt;arrow.apache.org&lt;/a&gt; and is 
the format used for file and stream I/O between applications wishing to interchange Arrow data.&lt;/p&gt;

&lt;p&gt;The Arrow project released IPC version 5 of the Arrow IPC format in version 1.0.0. Before that, a message padding 
change was made in version 0.15.0 to change the default padding to 8 bytes, while remaining in IPC version 4. Arrow 
release 0.14.1 and earlier were the last releases to use the legacy 4 byte alignment.
As part of 2.0.0, the Rust implementation was updated to comply with the changes up to release 0.15.0 of Arrow. 
Work on supporting IPC version 5 is underway, and is expected to be completed in time for 3.0.0.&lt;/p&gt;

&lt;p&gt;As part of the conformance work, Rust is being added to the Arrow integration suite, which tests that supported 
language implementations &lt;a href=&quot;https://issues.apache.org/jira/browse/ARROW-3690&quot;&gt;(ARROW-3690)&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Comply with the Arrow IPC format&lt;/li&gt;
  &lt;li&gt;Can read and write each other’s generated data&lt;/li&gt;
  &lt;li&gt;IPC version 4 is being verified through the above work.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;roadmap-for-300-and-beyond&quot;&gt;Roadmap for 3.0.0 and Beyond&lt;/h1&gt;

&lt;p&gt;Here are some of the initiatives that contributors are currently working on for future releases:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Support stable Rust&lt;/li&gt;
  &lt;li&gt;Improved DictionaryArray support and performance&lt;/li&gt;
  &lt;li&gt;Implement inner equijoins&lt;/li&gt;
  &lt;li&gt;Support for various platforms like ARMv8&lt;/li&gt;
  &lt;li&gt;Supporting the C Data Interface from Rust to better support interoperability with other Arrow implementations&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;how-to-get-involved&quot;&gt;How to Get Involved&lt;/h1&gt;

&lt;p&gt;If you are interested in contributing to the Rust subproject in Apache Arrow, you can find a list of open issues 
suitable for beginners &lt;a href=&quot;https://issues.apache.org/jira/issues/?jql=project%20%3D%20ARROW%20AND%20resolution%20%3D%20Unresolved%20AND%20component%20in%20(Rust%2C%20%22Rust%20-%20DataFusion%22)%20AND%20labels%20%3D%20beginner&quot;&gt;here&lt;/a&gt; and the full list &lt;a href=&quot;https://issues.apache.org/jira/issues/?jql=project%20%3D%20ARROW%20AND%20resolution%20%3D%20Unresolved%20AND%20component%20in%20(Rust%2C%20%22Rust%20-%20DataFusion%22)%20ORDER%20BY%20updated%20DESC%2C%20created%20DESC%2C%20priority%20DESC&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Other ways to get involved include trying out Arrow on some of your data and filing bug reports, and helping to 
improve the documentation.&lt;/p&gt;</content><author><name>pmc</name></author><category term="release" /><summary type="html">Apache Arrow 2.0.0 is a significant release for the Apache Arrow project in general (release notes), and the Rust subproject in particular, with almost 200 issues resolved by 15 contributors. In this blog post, we will go through the main changes affecting core Arrow, Parquet support, and DataFusion query engine. The full list of resolved issues can be found here. While the Java and C/C++ (used by Python and R) Arrow implementations likely remain the most feature-rich, with the 2.0.0 release, the Rust implementation is closing the feature gap quickly. Here are some of the highlights for this release. Core Arrow Crate Iterator Trait Primitive arrays (e.g., array of integers) can now be converted to and initialized from an iterator. This exposes a very popular API - iterators - to arrow arrays. Work for other types will continue throughout 3.0.0. Improved Variable-sized Arrays Variable sized arrays (e.g., array of strings) have been internally refactored to more easily support their larger (64-bit size offset) version. This allowed us to generalize some of the kernels to both (32 and 64) versions and perform type checks when building them. Kernels There have been numerous improvements in the Arrow compute kernels, including: New kernels have been added for string operations, including substring, min, max, concat, and length. Aggregate sum is now implemented for SIMD with a 5x improvement over the non-SIMD operation Many kernels have been improved to support dictionary-encoded arrays Some kernels were optimized for arrays without nulls, making them significantly faster in that case. Many kernels were optimized in the number of memory copies that are needed to apply them and also on their implementation. Other Improvements The Array trait now has get_buffer_memory_size and get_array_memory_size methods for determining the amount of memory allocated for the array. Parquet A significant effort is underway to create a Parquet writer for Arrow data. This work has not been released as part of 2.0.0, and is planned for the 3.0.0 release. The development of this writer is being carried out on the rust-parquet-arrow-writer branch, and the branch is regularly synchronized with the main branch. As part of the writer, the necessary improvements and features are being added to the reader. The main focus areas are: Supporting nested Arrow types, such as List&amp;lt;Struct&amp;lt;[Dictionary, String]&amp;gt;&amp;gt; Ensuring correct round-trip between the reader and writer by encoding Arrow schemas in the Parquet metadata Improve null value writing for Parquet A new parquet_derive crate has been created, which allows users to derive Parquet records for simple structs. Refer to the parquet_derive crate for usage examples. DataFusion DataFusion is an in-memory query engine with DataFrame and SQL APIs, built on top of base Arrow support. DataFrame API DataFusion now has a richer DataFrame API with improved documentation showing example usage, supporting the following operations: select_columns select filter aggregate limit sort collect explain Performance &amp;amp; Scalability DataFusion query execution now uses async/await with the tokio threaded runtime rather than launching dedicated threads, making queries scale much better across available cores. The hash aggregate physical operator has been largely re-written, resulting in significant performance improvements. Expressions and Compute Improved Scalar Functions DataFusion has many new functions, both in the SQL and the DataFrame API: Length of an string COUNT(DISTINCT column) to_timestamp IsNull and IsNotNull Min/Max for strings (lexicographic order) Array of columns Concatenation of strings Aliases of aggregate expressions Many existing expressions were also significantly optimized (2-3x speedups) by avoiding memory copies and leveraging Arrow format’s invariants. Unary mathematical functions (such as sqrt) now support both 32 and 64-bit floats and return the corresponding type, thereby allowing faster operations when higher precision is not needed. Improved User-defined Functions (UDFs) The API to use and register UDFs has been significantly improved, allowing users to register UDFs and call them both via SQL and the DataFrame API. UDFs now also have the same generality as DataFusion’s functions, including variadic and dynamically typed arguments. User-defined Aggregate Functions (UDAFs) DataFusion now supports user-defined aggregate functions that can be used to perform operations than span multiple rows, batches, and partitions. UDAFs have the same generality as DataFusion’s functions and support both row updates and batch updates. You can check out this example to learn how to declare and use a UDAF. User-defined Constants DataFusion now supports registering constants (e.g. “@version”) that live for the duration of the execution context and can be accessed from SQL. Query Planning &amp;amp; Optimization User-defined logical plans The Logical Plan enum is now extensible through an Extension variant which accepts a UserDefinedLogicalPlan trait using dynamic dispatch. Consequently, DataFusion now supports user-defined logical nodes, thereby allowing complex nodes to be planned and executed. You can check this example to learn how to declare a new node. Predicate push-down DataFusion now has a Predicate push-down optimizer rule that pushes filter operations as close as possible to scans, thereby speeding up the physical execution of suboptimal queries created via the DataFrame API. SQL DataFusion now uses a more recent release of the sqlparser crate, which has much more comprehensive support for SQL syntax and also supports multiple dialects (Postgres, MS SQL, and MySQL). It is now possible to see the query plan for a SQL statement using EXPLAIN syntax. Benchmarks The benchmark crate now contains a new benchmark based on TPC-H that can execute TPC-H query 1 against CSV, Parquet, and memory data sources. This is useful for running benchmarks against larger data sets. Integration Testing / IPC Arrow IPC is the format for serialization and interprocess communication. It is described in arrow.apache.org and is the format used for file and stream I/O between applications wishing to interchange Arrow data. The Arrow project released IPC version 5 of the Arrow IPC format in version 1.0.0. Before that, a message padding change was made in version 0.15.0 to change the default padding to 8 bytes, while remaining in IPC version 4. Arrow release 0.14.1 and earlier were the last releases to use the legacy 4 byte alignment. As part of 2.0.0, the Rust implementation was updated to comply with the changes up to release 0.15.0 of Arrow. Work on supporting IPC version 5 is underway, and is expected to be completed in time for 3.0.0. As part of the conformance work, Rust is being added to the Arrow integration suite, which tests that supported language implementations (ARROW-3690): Comply with the Arrow IPC format Can read and write each other’s generated data IPC version 4 is being verified through the above work. Roadmap for 3.0.0 and Beyond Here are some of the initiatives that contributors are currently working on for future releases: Support stable Rust Improved DictionaryArray support and performance Implement inner equijoins Support for various platforms like ARMv8 Supporting the C Data Interface from Rust to better support interoperability with other Arrow implementations How to Get Involved If you are interested in contributing to the Rust subproject in Apache Arrow, you can find a list of open issues suitable for beginners here and the full list here. Other ways to get involved include trying out Arrow on some of your data and filing bug reports, and helping to improve the documentation.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://arrow.apache.org/img/arrow.png" /><media:content medium="image" url="https://arrow.apache.org/img/arrow.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Apache Arrow 2.0.0 Release</title><link href="https://arrow.apache.org/blog/2020/10/22/2.0.0-release/" rel="alternate" type="text/html" title="Apache Arrow 2.0.0 Release" /><published>2020-10-22T02:00:00-04:00</published><updated>2020-10-22T02:00:00-04:00</updated><id>https://arrow.apache.org/blog/2020/10/22/2.0.0-release</id><content type="html" xml:base="https://arrow.apache.org/blog/2020/10/22/2.0.0-release/">&lt;!--

--&gt;

&lt;p&gt;The Apache Arrow team is pleased to announce the 2.0.0 release. This covers
over 3 months of development work and includes &lt;a href=&quot;https://issues.apache.org/jira/issues/?jql=project%20%3D%20ARROW%20AND%20status%20%3D%20Resolved%20AND%20fixVersion%20%3D%202.0.0&quot;&gt;&lt;strong&gt;511 resolved issues&lt;/strong&gt;&lt;/a&gt;
from &lt;a href=&quot;/release/2.0.0.html#contributors&quot;&gt;&lt;strong&gt;81 distinct contributors&lt;/strong&gt;&lt;/a&gt;. See the Install Page to learn how to
get the libraries for your platform.&lt;/p&gt;

&lt;p&gt;The release notes below are not exhaustive and only expose selected highlights
of the release. Many other bugfixes and improvements have been made: we refer
you to the &lt;a href=&quot;/release/2.0.0.html&quot;&gt;complete changelog&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;community&quot;&gt;Community&lt;/h2&gt;

&lt;p&gt;Since the 1.0.0 release, &lt;a href=&quot;https://github.com/jorgecarleitao&quot;&gt;Jorge Leitão&lt;/a&gt; has been added as a committer. Thank
you for your contributions!&lt;/p&gt;

&lt;h2 id=&quot;columnar-format&quot;&gt;Columnar Format&lt;/h2&gt;

&lt;p&gt;As this is the first major release since 1.0.0, we remind everyone that we have
moved to a “split” versioning system where the Library version (which is now
2.0.0) will now evolve separate from the Format version (which is still
1.0.0). Major releases of the libraries may contain non-backward-compatible API
changes, but they will not contain any incompatible format changes. See the
&lt;a href=&quot;http://arrow.apache.org/docs/format/Versioning.html&quot;&gt;Versioning and Stability&lt;/a&gt; page in the documentation for more.&lt;/p&gt;

&lt;p&gt;The columnar format metadata has been updated to permit 256-bit decimal values
in addition to 128-bit decimals. This change is backward and forward
compatible.&lt;/p&gt;

&lt;h2 id=&quot;arrow-flight-rpc-notes&quot;&gt;Arrow Flight RPC notes&lt;/h2&gt;

&lt;p&gt;For Arrow Flight, 2.0.0 mostly brings bugfixes. In Java, some memory leaks in
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FlightStream&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DoPut&lt;/code&gt; have been addressed. In C++ and Python, a deadlock
has been fixed in an edge case. Additionally, when supported by gRPC, TLS
verification can be disabled.&lt;/p&gt;

&lt;h2 id=&quot;c-notes&quot;&gt;C++ notes&lt;/h2&gt;

&lt;p&gt;Parquet reading now fully supports round trip of arbitrarily nested data,
including extension types with a nested storage type. In the process, several
bugs in writing nested data and FixedSizeList were fixed.  If writing data with
these type we recommend upgrading to this release and validating old data as
there is potential data loss.&lt;/p&gt;

&lt;p&gt;Datasets can now be written with partitions, including these features:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Writing to Parquet, including control over accumulation of statistics for
individual columns.&lt;/li&gt;
  &lt;li&gt;Writing to IPC/Feather, including body buffer compression.&lt;/li&gt;
  &lt;li&gt;Basenames of written files can be specified with a string template, allowing
non-colliding writes into the same partitioned dataset.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Other notable features in the release include&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Compute kernels for standard deviation, variance, and mode&lt;/li&gt;
  &lt;li&gt;Improvements to S3 support, including automatic region detection&lt;/li&gt;
  &lt;li&gt;CSV reading now parses Date type and creating Dictionary types&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;c-notes-1&quot;&gt;C# notes&lt;/h2&gt;

&lt;p&gt;The .NET package has added a number of new features this release.&lt;/p&gt;

&lt;p&gt;Full support for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Struct&lt;/code&gt; types.&lt;/p&gt;

&lt;p&gt;Synchronous write APIs for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ArrowStreamWriter&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ArrowFileWriter&lt;/code&gt;. These are
complimentary to the existing async write APIs, and can be used in situations
where the async APIs can’t be used.&lt;/p&gt;

&lt;p&gt;The ability to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DateTime&lt;/code&gt; instances with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Date32Array&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Date64Array&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;java-notes&quot;&gt;Java notes&lt;/h2&gt;

&lt;p&gt;The Java package has supported a number of new features.  Users can validate
vectors in a wider range of aspects, if they are willing to take more time.  In
dictionary encoding, dictionary indices can be expressed as unsigned integers.
A framework for data compression has been setup for IPC.&lt;/p&gt;

&lt;p&gt;The calculation for vector capacity has been simplified, so users should
experience notable performance improvements for various ‘setSafe’ methods.&lt;/p&gt;

&lt;p&gt;Bugs for JDBC adapters, sort algorithms, and ComplexCopier have been resolved
to make them more usable.&lt;/p&gt;

&lt;h2 id=&quot;javascript-notes&quot;&gt;JavaScript notes&lt;/h2&gt;

&lt;p&gt;Upgrades Arrow’s build to use TypeScript 3.9, fixing generated &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.d.ts&lt;/code&gt; typings.&lt;/p&gt;

&lt;h2 id=&quot;python-notes&quot;&gt;Python notes&lt;/h2&gt;

&lt;p&gt;Parquet reading now supports round trip of arbitrarily nested data. Several bug
fixes for writing nested data and FixedSizeList.  If writing data with these
type we recommend validating old data (there is potential some data loss) and
upgrade to 2.0.&lt;/p&gt;

&lt;p&gt;Extension types with a nested storage type now round trip through Parquet.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pyarrow.filesystem&lt;/code&gt; submodule is deprecated in favor of new filesystem
implementations in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pyarrow.fs&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The custom serialization functionality (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pyarrow.serialize()&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pyarrow.deserialize()&lt;/code&gt;, etc) is deprecated. Those functions provided a
Python-specific (not cross-language) serialization format which were not
compatible with the standardized Arrow (IPC) serialization format.  For
arbitrary objects, you can use the standard library &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pickle&lt;/code&gt; functionality
instead. For pyarrow objects, you can use the IPC serialization format through
the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pyarrow.ipc&lt;/code&gt; module, as explained above.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pyarrow.compute&lt;/code&gt; module now has a complete coverage of the available C++
compute kernels in the python API. Several new kernels have been added.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pyarrow.dataset&lt;/code&gt; module was further improved. In addition to reading, it
is now also possible to write partitioned datasets (with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;write_dataset()&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;The Arrow &amp;lt;-&amp;gt; Python conversion code was refactored, fixing several bugs and
corner cases.&lt;/p&gt;

&lt;p&gt;Conversion of an array of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pyarrow.MapType&lt;/code&gt; to Pandas has been added.&lt;/p&gt;

&lt;p&gt;Conversion of timezone aware datetimes to and/from pyarrow arrays including
pandas now round-trip preserving timezone. To use the old behavior (e.g. for
spark) set the environment variable PYARROW_IGNORE_TIMEZONE to a truthy value
(i.e.  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PYARROW_IGNORE_TIMEZONE=1&lt;/code&gt;)&lt;/p&gt;

&lt;h2 id=&quot;r-notes&quot;&gt;R notes&lt;/h2&gt;

&lt;p&gt;Highlights of the R release include&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Writing multi-file datasets with partitioning to Parquet or Feather&lt;/li&gt;
  &lt;li&gt;Reading and writing directly to AWS S3, both individual files and multi-file
datasets&lt;/li&gt;
  &lt;li&gt;Bindings for Flight which use reticulate&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In addition, the R package benefits from the various improvements in the C++
library listed above, including the ability to read and write Parquet files
with nested struct and list types.&lt;/p&gt;

&lt;p&gt;For more on what’s in the 2.0.0 R package, see the &lt;a href=&quot;/docs/r/news/&quot;&gt;R changelog&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;ruby-and-c-glib-notes&quot;&gt;Ruby and C GLib notes&lt;/h2&gt;

&lt;h3 id=&quot;ruby&quot;&gt;Ruby&lt;/h3&gt;

&lt;p&gt;In Ruby binding, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arrow::Table#save&lt;/code&gt; uses the number of rows as the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chunk_size&lt;/code&gt; parameter by default when the table is saved in a Parquet file.&lt;/p&gt;

&lt;h3 id=&quot;c-glib&quot;&gt;C GLib&lt;/h3&gt;

&lt;p&gt;The GLib binding newly supports &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GArrowStringDictionaryArrayBuilder&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GArrowBinaryDictionaryArrayBuilder&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Moreover the GLib binding supports new accessors of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GArrowListArray&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GArrowLargeListArray&lt;/code&gt;.  They are &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get_values&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get_value_offset&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get_value_length&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get_value_offsets&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;rust-notes&quot;&gt;Rust notes&lt;/h2&gt;

&lt;p&gt;Due to the high volume of activity in the Rust subproject in this release,
we’re writing a separate blog post dedicated to those changes.&lt;/p&gt;</content><author><name>pmc</name></author><category term="release" /><summary type="html">The Apache Arrow team is pleased to announce the 2.0.0 release. This covers over 3 months of development work and includes 511 resolved issues from 81 distinct contributors. See the Install Page to learn how to get the libraries for your platform. The release notes below are not exhaustive and only expose selected highlights of the release. Many other bugfixes and improvements have been made: we refer you to the complete changelog. Community Since the 1.0.0 release, Jorge Leitão has been added as a committer. Thank you for your contributions! Columnar Format As this is the first major release since 1.0.0, we remind everyone that we have moved to a “split” versioning system where the Library version (which is now 2.0.0) will now evolve separate from the Format version (which is still 1.0.0). Major releases of the libraries may contain non-backward-compatible API changes, but they will not contain any incompatible format changes. See the Versioning and Stability page in the documentation for more. The columnar format metadata has been updated to permit 256-bit decimal values in addition to 128-bit decimals. This change is backward and forward compatible. Arrow Flight RPC notes For Arrow Flight, 2.0.0 mostly brings bugfixes. In Java, some memory leaks in FlightStream and DoPut have been addressed. In C++ and Python, a deadlock has been fixed in an edge case. Additionally, when supported by gRPC, TLS verification can be disabled. C++ notes Parquet reading now fully supports round trip of arbitrarily nested data, including extension types with a nested storage type. In the process, several bugs in writing nested data and FixedSizeList were fixed. If writing data with these type we recommend upgrading to this release and validating old data as there is potential data loss. Datasets can now be written with partitions, including these features: Writing to Parquet, including control over accumulation of statistics for individual columns. Writing to IPC/Feather, including body buffer compression. Basenames of written files can be specified with a string template, allowing non-colliding writes into the same partitioned dataset. Other notable features in the release include Compute kernels for standard deviation, variance, and mode Improvements to S3 support, including automatic region detection CSV reading now parses Date type and creating Dictionary types C# notes The .NET package has added a number of new features this release. Full support for Struct types. Synchronous write APIs for ArrowStreamWriter and ArrowFileWriter. These are complimentary to the existing async write APIs, and can be used in situations where the async APIs can’t be used. The ability to use DateTime instances with Date32Array and Date64Array. Java notes The Java package has supported a number of new features. Users can validate vectors in a wider range of aspects, if they are willing to take more time. In dictionary encoding, dictionary indices can be expressed as unsigned integers. A framework for data compression has been setup for IPC. The calculation for vector capacity has been simplified, so users should experience notable performance improvements for various ‘setSafe’ methods. Bugs for JDBC adapters, sort algorithms, and ComplexCopier have been resolved to make them more usable. JavaScript notes Upgrades Arrow’s build to use TypeScript 3.9, fixing generated .d.ts typings. Python notes Parquet reading now supports round trip of arbitrarily nested data. Several bug fixes for writing nested data and FixedSizeList. If writing data with these type we recommend validating old data (there is potential some data loss) and upgrade to 2.0. Extension types with a nested storage type now round trip through Parquet. The pyarrow.filesystem submodule is deprecated in favor of new filesystem implementations in pyarrow.fs. The custom serialization functionality (pyarrow.serialize(), pyarrow.deserialize(), etc) is deprecated. Those functions provided a Python-specific (not cross-language) serialization format which were not compatible with the standardized Arrow (IPC) serialization format. For arbitrary objects, you can use the standard library pickle functionality instead. For pyarrow objects, you can use the IPC serialization format through the pyarrow.ipc module, as explained above. The pyarrow.compute module now has a complete coverage of the available C++ compute kernels in the python API. Several new kernels have been added. The pyarrow.dataset module was further improved. In addition to reading, it is now also possible to write partitioned datasets (with write_dataset()). The Arrow &amp;lt;-&amp;gt; Python conversion code was refactored, fixing several bugs and corner cases. Conversion of an array of pyarrow.MapType to Pandas has been added. Conversion of timezone aware datetimes to and/from pyarrow arrays including pandas now round-trip preserving timezone. To use the old behavior (e.g. for spark) set the environment variable PYARROW_IGNORE_TIMEZONE to a truthy value (i.e. PYARROW_IGNORE_TIMEZONE=1) R notes Highlights of the R release include Writing multi-file datasets with partitioning to Parquet or Feather Reading and writing directly to AWS S3, both individual files and multi-file datasets Bindings for Flight which use reticulate In addition, the R package benefits from the various improvements in the C++ library listed above, including the ability to read and write Parquet files with nested struct and list types. For more on what’s in the 2.0.0 R package, see the R changelog. Ruby and C GLib notes Ruby In Ruby binding, Arrow::Table#save uses the number of rows as the chunk_size parameter by default when the table is saved in a Parquet file. C GLib The GLib binding newly supports GArrowStringDictionaryArrayBuilder and GArrowBinaryDictionaryArrayBuilder. Moreover the GLib binding supports new accessors of GArrowListArray and GArrowLargeListArray. They are get_values, get_value_offset, get_value_length, and get_value_offsets. Rust notes Due to the high volume of activity in the Rust subproject in this release, we’re writing a separate blog post dedicated to those changes.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://arrow.apache.org/img/arrow.png" /><media:content medium="image" url="https://arrow.apache.org/img/arrow.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Making Arrow C++ Builds Simpler, Smaller, and Faster</title><link href="https://arrow.apache.org/blog/2020/07/29/cpp-build-simplification/" rel="alternate" type="text/html" title="Making Arrow C++ Builds Simpler, Smaller, and Faster" /><published>2020-07-29T02:00:00-04:00</published><updated>2020-07-29T02:00:00-04:00</updated><id>https://arrow.apache.org/blog/2020/07/29/cpp-build-simplification</id><content type="html" xml:base="https://arrow.apache.org/blog/2020/07/29/cpp-build-simplification/">&lt;!--

--&gt;

&lt;p&gt;Over the last four and a half years, we’ve worked to build a
“batteries-included” development platform for high-performance analytics
applications in C++. As the scope of the project has grown, we have sometimes
taken on additional library dependencies to support a wide variety of systems
and data processing tasks.&lt;/p&gt;

&lt;p&gt;While these dependencies give us leverage on hard problems, in some cases they
have added complexity for projects that depend on Arrow. Some projects have thus
been concerned about depending on the Arrow C++ library, particularly if their
use of the Arrow library’s features is limited. Indeed, in the earlier stages of
the Arrow project development, dependency management issues did cause problems
for early adopters.&lt;/p&gt;

&lt;p&gt;We want developers to trust that they can use and depend on our libraries, and
that doing so doesn’t add a burden for their own project maintenance or for
their users. Over the last year, we have undertaken a number of significant
projects to accommodate the different ways that people want to depend on Arrow
C++. We’ve aimed to make the build process simple by default, without requiring
special environment setup, yet also highly configurable for those who need to
specialize. This includes a &lt;em&gt;zero-dependency option&lt;/em&gt; for projects that wish to use
the Arrow C++ core but take on no transitive dependencies. We’ve also worked to
make builds faster and more compact, even as we continue to add new
functionality.&lt;/p&gt;

&lt;p&gt;This post covers many of the efforts we’ve made, both in the C++ libraries and
in the Arrow Python and R packages that depend on them. Compared to a year ago,
the build experience is much more reliable on a wider range of platforms,
requires fewer dependencies, and yields smaller package sizes.&lt;/p&gt;

&lt;h2 id=&quot;minimal-default-build-options&quot;&gt;Minimal default build options&lt;/h2&gt;

&lt;p&gt;One rough edge for people using Arrow as a dependency was that many optional
project components were enabled in the build by default, thus requiring any
extra dependencies of those optional components. Rather than expecting users to
disable optional components one by one, we have made the default for all
optional components to be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OFF&lt;/code&gt; so that the default configuration is a
dependency-free minimal core build.&lt;/p&gt;

&lt;p&gt;The only third-party library enabled by default is
&lt;a href=&quot;http://jemalloc.net/&quot;&gt;jemalloc&lt;/a&gt;, the project’s recommended memory allocator
(except on Windows, where it is also disabled). Given that Arrow applications
often process large volumes of data, we have found additionally that using
memory allocators provided by projects like jemalloc and
&lt;a href=&quot;https://microsoft.github.io/mimalloc/&quot;&gt;mimalloc&lt;/a&gt; yield significantly better
performance over the default system allocators. Even so, this can also be
disabled if desired.&lt;/p&gt;

&lt;p&gt;To demonstrate a minimal build, we have provided a
&lt;a href=&quot;https://github.com/apache/arrow/blob/master/cpp/examples/minimal_build/Dockerfile&quot;&gt;Dockerfile&lt;/a&gt;
which can be used to build the project requiring only CMake and a C++ compiler
with zero dependencies. Additionally, we have included an
&lt;a href=&quot;https://github.com/apache/arrow/tree/master/cpp/examples/minimal_build&quot;&gt;example&lt;/a&gt;
of including Arrow as an external project dependency in another CMake project.&lt;/p&gt;

&lt;h2 id=&quot;flexible-dependency-configuration-in-cmake&quot;&gt;Flexible dependency configuration in CMake&lt;/h2&gt;

&lt;p&gt;As part of improving our CMake-based build system, we have made the
configuration of build dependencies both flexible and consistent for different
users’ needs. In some cases, developers want Arrow to build against dependencies
provided by an external package manager, such as apt in Debian-based Linux
distributions. In other cases, developers may want to avoid any quirks of system
libraries and build all dependencies together with the Arrow build.&lt;/p&gt;

&lt;p&gt;For each package, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;${Library}_SOURCE&lt;/code&gt; CMake option can be set to one of three
values:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SYSTEM&lt;/code&gt;, when the dependency is to be provided externally (such as by a Linux distribution or Homebrew)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BUNDLED&lt;/code&gt;, when you want the dependency to be built from source while building Arrow, and then statically-linked with the resulting libraries&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AUTO&lt;/code&gt;, which tries the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SYSTEM&lt;/code&gt; approach but falls back on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BUNDLED&lt;/code&gt; if the dependency cannot be located&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We additionally have provided &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CONDA&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BREW&lt;/code&gt; source types for the common
scenarios when developers are using the conda or Homebrew package managers.
These dependency sources can be configured on an individual dependency basis or
globally using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ARROW_DEPENDENCY_SOURCE&lt;/code&gt; CMake option. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AUTO&lt;/code&gt; is default,
which enables builds to be faster by using pre-built system libraries where
possible but still succeed even if all dependencies are not available on the
system.&lt;/p&gt;

&lt;h2 id=&quot;reduced-external-dependencies&quot;&gt;Reduced external dependencies&lt;/h2&gt;

&lt;p&gt;Another area of focus was to audit our dependencies. We went through and found
places where we could drop external dependencies without losing useful
functionality and without having to rewrite a lot or copy too much code into our
codebase.&lt;/p&gt;

&lt;p&gt;We have eliminated Boost as a dependency of the core Arrow library, and in other
components (Gandiva, Parquet, etc.), the use of Boost has been greatly reduced.
In addition, when building Boost “bundled” in the Arrow build, we stripped down
the Boost package we download to the minimum needed, cutting out 90 percent of
the download size.&lt;/p&gt;

&lt;p&gt;We vendored a few small dependencies, such as the double-conversion and
uriparser libraries, so that they do not need to be downloaded and built
separately.&lt;/p&gt;

&lt;p&gt;We also compiled the Flatbuffers and Thrift definitions (which are needed to
implement the Arrow and Parquet formats, respectively) and checked in the
resulting C++ code to the Arrow repository. This means that Flatbuffers is no
longer a build or runtime dependency of Arrow, and we only need the Thrift C++
library, not the Thrift compiler, which has additional dependencies on flex and
bison.&lt;/p&gt;

&lt;h2 id=&quot;c-library-size-reductions&quot;&gt;C++ library size reductions&lt;/h2&gt;

&lt;p&gt;As the C++ codebase grows in size, so too does compilation times and the amount
of binary code generated by the C++ compiler. Over the last several months, we
have begun analyzing the Arrow libraries both compile times and generated code
sizes. This has yielded both significant size reductions (more than 30 percent
code size reduction since 0.17.0). We have also restructured header files to
avoid including unneeded header files, thus lightening the load on C++ compilers
and improving compilation times.&lt;/p&gt;

&lt;h2 id=&quot;python-wheels&quot;&gt;Python wheels&lt;/h2&gt;

&lt;p&gt;The expectation for binary wheel packages on the Python Package Index (PyPI) is
that they are self-contained and have no external dependencies except on other
Python packages. Additionally, each user of pyarrow may need different things
from the project. Some users just want to read Parquet files and convert them to
pandas data frames while others want to use
&lt;a href=&quot;/blog/2019/10/13/introducing-arrow-flight/&quot;&gt;Flight&lt;/a&gt; for
moving around large datasets. Thus, the “pyarrow” wheel has from the beginning
of the project been a fairly comprehensive build including as many optional
components as is practical for us to maintain.&lt;/p&gt;

&lt;p&gt;A comprehensive wheel package has some downsides: most notably for users, it is large.
Additionally, through a snafu relating to C++ shared libraries, for several
releases the wheel packages would create two copies of each C++ library on disk,
resulting in double the amount of disk usage. This has caused problems for
people using pyarrow in space-constrained environments like AWS Lambda.&lt;/p&gt;

&lt;p&gt;In the 1.0.0 release, we have implemented some changes that have reduced the
size of the wheels (both in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.whl&lt;/code&gt; form and installed on disk) by about 75 percent:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Working around the problems resulting in two copies of each shared library being created in the site-packages directory.&lt;/li&gt;
  &lt;li&gt;Disabling Gandiva, which required the LLVM runtime, the largest statically-linked dependency. Gandiva is still available to conda users now–it’s just not included in the wheels–and we hope to package it as a separate &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pyarrow-llvm&lt;/code&gt; package in the future.&lt;/li&gt;
  &lt;li&gt;Reducing the size of the C++ shared libraries as discussed above&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now pyarrow is about the size of NumPy and thus much easier for Python projects
to take on as a hard dependency without worrying about large on-disk size.&lt;/p&gt;

&lt;p&gt;Looking ahead, we have discussed &lt;a href=&quot;https://issues.apache.org/jira/browse/ARROW-8518&quot;&gt;strategies&lt;/a&gt;
for breaking up pyarrow into multiple wheel packages, sort of a “hub and spoke”
model where some optional pieces are installed as separate wheels so people only
needing some “core” functionality only have to install a small package. This
would be a significant project, though, so for now we’ve focused on improvements
to the comprehensive wheel package.&lt;/p&gt;

&lt;h2 id=&quot;r-packaging&quot;&gt;R packaging&lt;/h2&gt;

&lt;p&gt;Packaging Arrow for R involves similar challenges to Python wheels, though the
technical details are unique. Like how &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pip install pyarrow&lt;/code&gt; should just work
everywhere, so should &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;install.packages(&quot;arrow&quot;)&lt;/code&gt; in R, and we have invested
significant effort to get there. Because the R package depends on a C++ library
in active development, this is not trivial, particularly for all of the
combinations of C++ compilers and standard libraries on Linux.&lt;/p&gt;

&lt;p&gt;In the initial CRAN release last year, version 0.14.1, only Windows and macOS
binary packages worked out of the box. For Linux, you had to install the C++
library separately, before installing the R package. While Python wheels contain
binary libraries even on Linux, CRAN only hosts source packages that must be
compiled on the user’s machine at install time. This led to an experience that
was less than ideal for Linux users.&lt;/p&gt;

&lt;p&gt;Starting in version 0.16, a source package installation on Linux handles its C++
dependencies automatically. By default, the package executes a &lt;a href=&quot;https://github.com/apache/arrow/blob/master/r/inst/build_arrow_static.sh&quot;&gt;bundled
script&lt;/a&gt;
that downloads and builds the Arrow C++ library with no system dependencies
beyond what R requires. On many common Linux distributions and versions, this
can be sped up by
&lt;a href=&quot;/docs/r/articles/install.html&quot;&gt;setting an environment variable&lt;/a&gt;
to download a prebuilt static C++ library for inclusion in the package.&lt;/p&gt;

&lt;p&gt;To accompany these improvements and to ensure that they succeeded on a wide
range of platforms, we added
&lt;a href=&quot;https://github.com/apache/arrow/blob/bebcc5db3cc2890a9c53ebd53bc60863ae5ebb49/dev/tasks/tasks.yml#L1704-L1785&quot;&gt;extensive&lt;/a&gt;
&lt;a href=&quot;https://github.com/ursa-labs/arrow-r-nightly/blob/master/.github/workflows/test-binary.yml&quot;&gt;nightly builds&lt;/a&gt;
to our continuous integration system. These are also easily extensible–all we
need is a Docker image containing R, and we can plug new environments into our
regular nightly testing.&lt;/p&gt;

&lt;p&gt;Since then, we’ve continued to improve the installation experience and look for
ways to reduce build time and package size. The C++ library improvements
discussed above help the R package since most installations of the R package
either build or otherwise include the C++ library. Within the R package itself,
we’ve looked for ways to include just what is needed and nothing more. These
efforts have resulted in smaller downloads and installed package sizes. From
0.17.1 to 1.0.0, installed library sizes for macOS and Windows CRAN binaries are
down 10 percent, and the prebuilt static C++ libraries for Linux are 33 percent
smaller compared to 0.16.0, despite the addition of many new features.&lt;/p&gt;

&lt;!-- macOS build 0.17.1:

checking installed package size ... NOTE
  installed size is 38.1Mb
  sub-directories of 1Mb or more:
    R 3.2Mb
    libs 34.5Mb

autobrew libs on master: 8.9mb

macOS 1.0.0
checking installed package size ... NOTE
  installed size is 35.0Mb
  sub-directories of 1Mb or more:
    R 3.2Mb
    libs 31.3Mb

windows 0.17.1:
checking installed package size ... NOTE
  installed size is 27.9Mb
  sub-directories of 1Mb or more:
    R 3.2Mb
    libs 24.3Mb

windows libs on 1.0.0:
checking installed package size ... NOTE
  installed size is 24.9Mb
  sub-directories of 1Mb or more:
    R 3.2Mb
    libs 21.2Mb

ubuntu-18.04 libarrow binaries:
0.16.0.2 18.84 MB
0.17.0 	  12.81 MB
1.0.0      12.45 MB --&gt;

&lt;h2 id=&quot;c-interface&quot;&gt;C Interface&lt;/h2&gt;

&lt;p&gt;Finally, we have observed that some projects may wish to produce or consume a
subset of the Arrow format and do not want to take on any additional code
dependencies. There are also scenarios where two libraries need to share
in-memory Arrow data structures but are unable to depend on a common Arrow
library such as the reference C++ implementation. To address these use cases, we
designed the &lt;a href=&quot;/docs/format/CDataInterface.html&quot;&gt;C Interface&lt;/a&gt;
to provide a lightweight way to exchange Arrow data at the C level without any
memory copying.&lt;/p&gt;

&lt;p&gt;When using the C interface, a developer populates simple C data structures that
contain the schema (data type) information about an Arrow data structure and the
addresses of the pieces of memory that constitute the data. This permits
libraries to be plugged together easily in-memory without any shared code
(except the C interface structure definitions). Most programming languages have
the ability to manipulate C structures and so this interface can even be used
without having to write or compile C code. We have used the C interface to
&lt;a href=&quot;/docs/r/articles/python.html&quot;&gt;transfer data structures between Python and R&lt;/a&gt;
in-memory using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reticulate&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;One exciting use case for the Arrow C interface is to add Arrow import and
export to database driver libraries which often contain a C API.&lt;/p&gt;

&lt;h2 id=&quot;looking-ahead&quot;&gt;Looking ahead&lt;/h2&gt;

&lt;p&gt;As the project grows, we will continue working to make the build process as
fast and reliable as possible. If you see ways we can improve it further, or if
you run into trouble, please bring it up on our
&lt;a href=&quot;https://arrow.apache.org/community/#mailing-lists&quot;&gt;mailing list&lt;/a&gt; or
&lt;a href=&quot;https://issues.apache.org/jira/browse/ARROW&quot;&gt;report an issue&lt;/a&gt;.&lt;/p&gt;</content><author><name>pmc</name></author><category term="application" /><summary type="html">Over the last four and a half years, we’ve worked to build a “batteries-included” development platform for high-performance analytics applications in C++. As the scope of the project has grown, we have sometimes taken on additional library dependencies to support a wide variety of systems and data processing tasks. While these dependencies give us leverage on hard problems, in some cases they have added complexity for projects that depend on Arrow. Some projects have thus been concerned about depending on the Arrow C++ library, particularly if their use of the Arrow library’s features is limited. Indeed, in the earlier stages of the Arrow project development, dependency management issues did cause problems for early adopters. We want developers to trust that they can use and depend on our libraries, and that doing so doesn’t add a burden for their own project maintenance or for their users. Over the last year, we have undertaken a number of significant projects to accommodate the different ways that people want to depend on Arrow C++. We’ve aimed to make the build process simple by default, without requiring special environment setup, yet also highly configurable for those who need to specialize. This includes a zero-dependency option for projects that wish to use the Arrow C++ core but take on no transitive dependencies. We’ve also worked to make builds faster and more compact, even as we continue to add new functionality. This post covers many of the efforts we’ve made, both in the C++ libraries and in the Arrow Python and R packages that depend on them. Compared to a year ago, the build experience is much more reliable on a wider range of platforms, requires fewer dependencies, and yields smaller package sizes. Minimal default build options One rough edge for people using Arrow as a dependency was that many optional project components were enabled in the build by default, thus requiring any extra dependencies of those optional components. Rather than expecting users to disable optional components one by one, we have made the default for all optional components to be OFF so that the default configuration is a dependency-free minimal core build. The only third-party library enabled by default is jemalloc, the project’s recommended memory allocator (except on Windows, where it is also disabled). Given that Arrow applications often process large volumes of data, we have found additionally that using memory allocators provided by projects like jemalloc and mimalloc yield significantly better performance over the default system allocators. Even so, this can also be disabled if desired. To demonstrate a minimal build, we have provided a Dockerfile which can be used to build the project requiring only CMake and a C++ compiler with zero dependencies. Additionally, we have included an example of including Arrow as an external project dependency in another CMake project. Flexible dependency configuration in CMake As part of improving our CMake-based build system, we have made the configuration of build dependencies both flexible and consistent for different users’ needs. In some cases, developers want Arrow to build against dependencies provided by an external package manager, such as apt in Debian-based Linux distributions. In other cases, developers may want to avoid any quirks of system libraries and build all dependencies together with the Arrow build. For each package, the ${Library}_SOURCE CMake option can be set to one of three values: SYSTEM, when the dependency is to be provided externally (such as by a Linux distribution or Homebrew) BUNDLED, when you want the dependency to be built from source while building Arrow, and then statically-linked with the resulting libraries AUTO, which tries the SYSTEM approach but falls back on BUNDLED if the dependency cannot be located We additionally have provided CONDA and BREW source types for the common scenarios when developers are using the conda or Homebrew package managers. These dependency sources can be configured on an individual dependency basis or globally using the ARROW_DEPENDENCY_SOURCE CMake option. AUTO is default, which enables builds to be faster by using pre-built system libraries where possible but still succeed even if all dependencies are not available on the system. Reduced external dependencies Another area of focus was to audit our dependencies. We went through and found places where we could drop external dependencies without losing useful functionality and without having to rewrite a lot or copy too much code into our codebase. We have eliminated Boost as a dependency of the core Arrow library, and in other components (Gandiva, Parquet, etc.), the use of Boost has been greatly reduced. In addition, when building Boost “bundled” in the Arrow build, we stripped down the Boost package we download to the minimum needed, cutting out 90 percent of the download size. We vendored a few small dependencies, such as the double-conversion and uriparser libraries, so that they do not need to be downloaded and built separately. We also compiled the Flatbuffers and Thrift definitions (which are needed to implement the Arrow and Parquet formats, respectively) and checked in the resulting C++ code to the Arrow repository. This means that Flatbuffers is no longer a build or runtime dependency of Arrow, and we only need the Thrift C++ library, not the Thrift compiler, which has additional dependencies on flex and bison. C++ library size reductions As the C++ codebase grows in size, so too does compilation times and the amount of binary code generated by the C++ compiler. Over the last several months, we have begun analyzing the Arrow libraries both compile times and generated code sizes. This has yielded both significant size reductions (more than 30 percent code size reduction since 0.17.0). We have also restructured header files to avoid including unneeded header files, thus lightening the load on C++ compilers and improving compilation times. Python wheels The expectation for binary wheel packages on the Python Package Index (PyPI) is that they are self-contained and have no external dependencies except on other Python packages. Additionally, each user of pyarrow may need different things from the project. Some users just want to read Parquet files and convert them to pandas data frames while others want to use Flight for moving around large datasets. Thus, the “pyarrow” wheel has from the beginning of the project been a fairly comprehensive build including as many optional components as is practical for us to maintain. A comprehensive wheel package has some downsides: most notably for users, it is large. Additionally, through a snafu relating to C++ shared libraries, for several releases the wheel packages would create two copies of each C++ library on disk, resulting in double the amount of disk usage. This has caused problems for people using pyarrow in space-constrained environments like AWS Lambda. In the 1.0.0 release, we have implemented some changes that have reduced the size of the wheels (both in .whl form and installed on disk) by about 75 percent: Working around the problems resulting in two copies of each shared library being created in the site-packages directory. Disabling Gandiva, which required the LLVM runtime, the largest statically-linked dependency. Gandiva is still available to conda users now–it’s just not included in the wheels–and we hope to package it as a separate pyarrow-llvm package in the future. Reducing the size of the C++ shared libraries as discussed above Now pyarrow is about the size of NumPy and thus much easier for Python projects to take on as a hard dependency without worrying about large on-disk size. Looking ahead, we have discussed strategies for breaking up pyarrow into multiple wheel packages, sort of a “hub and spoke” model where some optional pieces are installed as separate wheels so people only needing some “core” functionality only have to install a small package. This would be a significant project, though, so for now we’ve focused on improvements to the comprehensive wheel package. R packaging Packaging Arrow for R involves similar challenges to Python wheels, though the technical details are unique. Like how pip install pyarrow should just work everywhere, so should install.packages(&quot;arrow&quot;) in R, and we have invested significant effort to get there. Because the R package depends on a C++ library in active development, this is not trivial, particularly for all of the combinations of C++ compilers and standard libraries on Linux. In the initial CRAN release last year, version 0.14.1, only Windows and macOS binary packages worked out of the box. For Linux, you had to install the C++ library separately, before installing the R package. While Python wheels contain binary libraries even on Linux, CRAN only hosts source packages that must be compiled on the user’s machine at install time. This led to an experience that was less than ideal for Linux users. Starting in version 0.16, a source package installation on Linux handles its C++ dependencies automatically. By default, the package executes a bundled script that downloads and builds the Arrow C++ library with no system dependencies beyond what R requires. On many common Linux distributions and versions, this can be sped up by setting an environment variable to download a prebuilt static C++ library for inclusion in the package. To accompany these improvements and to ensure that they succeeded on a wide range of platforms, we added extensive nightly builds to our continuous integration system. These are also easily extensible–all we need is a Docker image containing R, and we can plug new environments into our regular nightly testing. Since then, we’ve continued to improve the installation experience and look for ways to reduce build time and package size. The C++ library improvements discussed above help the R package since most installations of the R package either build or otherwise include the C++ library. Within the R package itself, we’ve looked for ways to include just what is needed and nothing more. These efforts have resulted in smaller downloads and installed package sizes. From 0.17.1 to 1.0.0, installed library sizes for macOS and Windows CRAN binaries are down 10 percent, and the prebuilt static C++ libraries for Linux are 33 percent smaller compared to 0.16.0, despite the addition of many new features. C Interface Finally, we have observed that some projects may wish to produce or consume a subset of the Arrow format and do not want to take on any additional code dependencies. There are also scenarios where two libraries need to share in-memory Arrow data structures but are unable to depend on a common Arrow library such as the reference C++ implementation. To address these use cases, we designed the C Interface to provide a lightweight way to exchange Arrow data at the C level without any memory copying. When using the C interface, a developer populates simple C data structures that contain the schema (data type) information about an Arrow data structure and the addresses of the pieces of memory that constitute the data. This permits libraries to be plugged together easily in-memory without any shared code (except the C interface structure definitions). Most programming languages have the ability to manipulate C structures and so this interface can even be used without having to write or compile C code. We have used the C interface to transfer data structures between Python and R in-memory using reticulate. One exciting use case for the Arrow C interface is to add Arrow import and export to database driver libraries which often contain a C API. Looking ahead As the project grows, we will continue working to make the build process as fast and reliable as possible. If you see ways we can improve it further, or if you run into trouble, please bring it up on our mailing list or report an issue.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://arrow.apache.org/img/arrow.png" /><media:content medium="image" url="https://arrow.apache.org/img/arrow.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Apache Arrow 1.0.0 Release</title><link href="https://arrow.apache.org/blog/2020/07/24/1.0.0-release/" rel="alternate" type="text/html" title="Apache Arrow 1.0.0 Release" /><published>2020-07-24T02:00:00-04:00</published><updated>2020-07-24T02:00:00-04:00</updated><id>https://arrow.apache.org/blog/2020/07/24/1.0.0-release</id><content type="html" xml:base="https://arrow.apache.org/blog/2020/07/24/1.0.0-release/">&lt;!--

--&gt;

&lt;p&gt;The Apache Arrow team is pleased to announce the 1.0.0 release. This covers
over 3 months of development work and includes &lt;a href=&quot;https://issues.apache.org/jira/issues/?jql=project%20%3D%20ARROW%20AND%20status%20%3D%20Resolved%20AND%20fixVersion%20%3D%201.0.0&quot;&gt;&lt;strong&gt;810 resolved issues&lt;/strong&gt;&lt;/a&gt; from
&lt;a href=&quot;/release/1.0.0.html#contributors&quot;&gt;&lt;strong&gt;100 distinct contributors&lt;/strong&gt;&lt;/a&gt;. See the Install Page to learn how to get the
libraries for your platform.&lt;/p&gt;

&lt;p&gt;Despite a “1.0.0” version, this is the 18th major release of Apache Arrow and
marks a transition to binary stability of the columnar format (which was
already informally backward-compatible going back to December 2017) and a
transition to Semantic Versioning for the Arrow software libraries.&lt;/p&gt;

&lt;p&gt;The release notes below are not exhaustive and only expose selected highlights
of the release. Many other bugfixes and improvements have been made: we refer
you to the &lt;a href=&quot;/release/1.0.0.html&quot;&gt;complete changelog&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;100-columnar-format-and-stability-guarantees&quot;&gt;1.0.0 Columnar Format and Stability Guarantees&lt;/h2&gt;

&lt;p&gt;The 1.0.0 release indicates that the Arrow columnar format is declared stable,
with &lt;a href=&quot;/docs/format/Versioning.html&quot;&gt;forward and backward compatibility guarantees&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The Arrow columnar format received several recent changes and additions,
leading to the 1.0.0 format version:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The metadata version was bumped to a new version V5, indicating an
incompatible change in the buffer layout of Union types. All
other types keep the same layout as in V4. V5 also includes format additions
to assist with forward compatibility (detecting unsupported changes sent by
future library versions). Libraries remain backward compatible with data
generated by all libraries back to 0.8.0 (December 2017) and the Java and C++
libraries are capable of generating V4-compatible messages (for sending data
to applications using 0.8.0 to 0.17.1).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Dictionary indices are now allowed to be unsigned integers rather than only
signed integers. Using UInt64 is still discouraged because of
poor Java support.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A “Feature” enum has been added to announce the use of specific optional
features in an IPC stream, such as buffer compression.  This
new field is not used by any implementation yet.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Optional buffer compression using LZ4 or ZStandard was added to the IPC
format.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Decimal types now have an optional “bitWidth” field, defaulting to 128.&lt;br /&gt;
This will allow for future support of other decimal widths
such as 32- and 64-bit.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The validity bitmap buffer has been removed from Union types. The nullity of
a slot in a Union array is determined exclusively by the constituent arrays
forming the union.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Integration testing has been expanded to test for extension types and
nested dictionaries. See the &lt;a href=&quot;/docs/status.html&quot;&gt;implementation matrix&lt;/a&gt; for details.&lt;/p&gt;

&lt;h2 id=&quot;community&quot;&gt;Community&lt;/h2&gt;

&lt;p&gt;Since the last release, we have added two new committers:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Liya Fan&lt;/li&gt;
  &lt;li&gt;Ji Liu&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thank you for all your contributions!&lt;/p&gt;

&lt;h2 id=&quot;arrow-flight-rpc-notes&quot;&gt;Arrow Flight RPC notes&lt;/h2&gt;

&lt;p&gt;Flight now offers DoExchange, a fully bidirectional data endpoint, in addition
to DoGet and DoPut, in C++, Java, and Python. Middlewares in all languages now
expose binary-valued headers. Additionally, servers and clients can set Arrow
IPC read/write options in all languages, making compatibility easier with earlier
versions of Arrow Flight.&lt;/p&gt;

&lt;p&gt;In C++ and Python, Flight now exposes more options from gRPC, including the
address of the client (on the server) and the ability to set low-level gRPC
client options. Flight also supports mutual TLS authentication and the ability
for a client to control the size of a data message on the wire.&lt;/p&gt;

&lt;h2 id=&quot;c-notes&quot;&gt;C++ notes&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Support for static linking with Arrow has been vastly improved, including the
introduction of a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libarrow_bundled_dependencies.a&lt;/code&gt; library bundling all
external dependencies that are built from source by Arrow’s build system
rather than installed by an external package manager. This makes
it significantly easier to create dependency-free applications with all
libraries statically-linked.&lt;/li&gt;
  &lt;li&gt;Following the Arrow format changes, Union arrays cannot have a top-level
bitmap anymore.&lt;/li&gt;
  &lt;li&gt;A number of improvements were made to reduce the overall generated binary
size in the Arrow library.&lt;/li&gt;
  &lt;li&gt;A convenience API &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GetBuildInfo&lt;/code&gt; allows querying the characteristics of the
Arrow library.  We encourage you to suggest any desired addition to the
returned information.&lt;/li&gt;
  &lt;li&gt;We added an optional dependency to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;utf8proc&lt;/code&gt; library, used in several
compute functions (see below).&lt;/li&gt;
  &lt;li&gt;Instead of sharing the same concrete classes, sparse and dense unions now
have separated classes (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SparseUnionType&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DenseUnionType&lt;/code&gt;, as well as
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SparseUnionArray&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DenseUnionArray&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SparseUnionScalar&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DenseUnionScalar&lt;/code&gt;).&lt;/li&gt;
  &lt;li&gt;Arrow can now be built for iOS using the right set of CMake options, though
we don’t officially support it.  See &lt;a href=&quot;https://github.com/UnfoldedInc/deck.gl-native-dependencies/blob/master/docs/iOS-BUILD.md#arrow-v0170&quot;&gt;this writeup&lt;/a&gt; for details.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;compute-functions&quot;&gt;Compute functions&lt;/h3&gt;

&lt;p&gt;The compute kernel layer was extensively reworked.  It now offers
a generic function lookup, dispatch and execution mechanism.  Furthermore, new
internal scaffoldings make it vastly easier to write new function kernels, with
many common details like type checking and function dispatch based on type
combinations handled by the framework rather than implemented manually by the
function developer.&lt;/p&gt;

&lt;p&gt;Around 30 new array compute functions have been added. For example,
Unicode-compliant predicates and transforms, such as lowercase and uppercase
transforms, are now available.&lt;/p&gt;

&lt;p&gt;The available compute functions are listed exhaustively in the Sphinx-generated
&lt;a href=&quot;/docs/cpp/compute.html&quot;&gt;documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;datasets&quot;&gt;Datasets&lt;/h3&gt;

&lt;p&gt;Datasets can now be read from CSV files.&lt;/p&gt;

&lt;p&gt;Datasets can be expanded to their component fragments, enabling fine grained
interoperability with other consumers of data files. Where applicable, metadata
is available as a property of the fragment, including partition information and
(for the parquet format) per-column statistics.&lt;/p&gt;

&lt;p&gt;Datasets of parquet files can now be assembled from a single &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_metadata&lt;/code&gt; file,
such as those created by systems like Dask and Spark. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_metadata&lt;/code&gt;
contains the metadata of all fragments, allowing construction of a statistics-
aware dataset with a single IO call.&lt;/p&gt;

&lt;h3 id=&quot;feather&quot;&gt;Feather&lt;/h3&gt;

&lt;p&gt;The Feather format is now available in version 2, which is simply the Arrow
IPC file format with another name.&lt;/p&gt;

&lt;h3 id=&quot;ipc&quot;&gt;IPC&lt;/h3&gt;

&lt;p&gt;By default, we now write IPC streams with metadata V5.  However, metadata V4
can be requested by setting the appropriate member in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IpcWriteOptions&lt;/code&gt;. V4 as
well as V5 metadata IPC streams can be read properly, with one exception: a V4
metadata stream containing Union arrays with top-level null values will refuse
reading.&lt;/p&gt;

&lt;p&gt;As noted above, there are no changes between V4 and V5 that break
backwards compatibility. For forward compatibility scenarios (where you need to
generate data to be read by an older Arrow library), you can set the V4
compatibility mode.&lt;/p&gt;

&lt;p&gt;Support for dictionary replacement and dictionary delta was implemented.&lt;/p&gt;

&lt;h3 id=&quot;parquet&quot;&gt;Parquet&lt;/h3&gt;

&lt;p&gt;Writing files with the LZ4 codec is disabled because it produces files
incompatible with the widely-used Hadoop Parquet implementation.  Support will
be reenabled once we align the LZ4 implementation with the special buffer
encoding expected by Hadoop.&lt;/p&gt;

&lt;h2 id=&quot;java-notes&quot;&gt;Java notes&lt;/h2&gt;

&lt;p&gt;The Java package introduces a number of low level changes in this release.
Most notable are the work in support of allocating large arrow buffers and
removing Netty from the public API. Users will have to update their
dependencies to use one of the two supported allocators Netty:
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;arrow-memory-netty&lt;/code&gt; or Unsafe (internal java api for direct memory)
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;arrow-memory-unsafe&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The Java Vector implementation has improved its interoperability having
verified &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LargeVarChar&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LargeBinary&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LargeList&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Union&lt;/code&gt;, Extension types
and duplicate field names in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Structs&lt;/code&gt; are binary compatible with C++ and the
specification.&lt;/p&gt;

&lt;h2 id=&quot;python-notes&quot;&gt;Python notes&lt;/h2&gt;

&lt;p&gt;The size of wheel packages is significantly reduced, up to 75%.  One side
effect is that these wheels do not enable Gandiva anymore (which requires the
LLVM runtime to be statically-linked). We are interested in providing Gandiva
as an add-on package as a separate Python wheel in the future.&lt;/p&gt;

&lt;p&gt;The Scalar class hierarchy was reworked to more closely follow its C++
counterpart.&lt;/p&gt;

&lt;p&gt;TLS CA certificates are looked up more reliably when using the S3 filesystem,
especially with manylinux wheels.&lt;/p&gt;

&lt;p&gt;The encoding of CSV files can now be specified explicitly, defaulting to UTF8.
Custom timestamp parsers can now be used for CSV files.&lt;/p&gt;

&lt;p&gt;Filesystems can now be implemented in pure Python.  As a result,
&lt;a href=&quot;https://filesystem-spec.readthedocs.io&quot;&gt;fsspec&lt;/a&gt;-based filesystems can now
be used in datasets.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parquet.read_table&lt;/code&gt; is now backed by the dataset API by default, enabling
filters on any column and more flexible partitioning.&lt;/p&gt;

&lt;h2 id=&quot;r-notes&quot;&gt;R notes&lt;/h2&gt;

&lt;p&gt;The R package added support for converting to and from many additional Arrow
types. Tables showing how R types are mapped to Arrow types and vice versa have
been added to the &lt;a href=&quot;/docs/r/articles/arrow.html&quot;&gt;introductory vignette&lt;/a&gt;, and nearly all types are handled.
In addition, R &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;attributes&lt;/code&gt; like custom classes and metadata are now preserved
when converting a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data.frame&lt;/code&gt; to an Arrow Table and are restored when loading
them back into R.&lt;/p&gt;

&lt;p&gt;For more on what’s in the 1.0.0 R package, see the &lt;a href=&quot;/docs/r/news/&quot;&gt;R changelog&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;ruby-and-c-glib-notes&quot;&gt;Ruby and C GLib notes&lt;/h2&gt;

&lt;p&gt;The Ruby and C GLib packages added support for the new compute function
framework, in which users can find a
compute function dynamically and call it. Users don’t need to wait for a C
GLib binding for new compute functions: if the C++ package provides a
new compute function, users can use it
without additional code in the Ruby and C GLib packages.&lt;/p&gt;

&lt;p&gt;The Ruby and C GLib packages added support for Apache Arrow
Dataset. The Ruby package provides a new gem for Apache Arrow Dataset,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;red-arrow-dataset&lt;/code&gt;. The C GLib package provides a new module for
Apache Arrow Dataset, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;arrow-dataset-glib&lt;/code&gt;. They just have a few
features for now but we will add more in future releases.&lt;/p&gt;

&lt;p&gt;The Ruby and C GLib packages added support for reading only the
specified row group in an Apache Parquet file.&lt;/p&gt;

&lt;h3 id=&quot;ruby&quot;&gt;Ruby&lt;/h3&gt;

&lt;p&gt;The Ruby package added support for column level compression in writing
Apache Parquet files.&lt;/p&gt;

&lt;p&gt;The Ruby package changed the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arrow::DictionaryArray#[]&lt;/code&gt; behavior. It now
returns the dictionary value instead of the dictionary index. This is a
backwards-incompatible change.&lt;/p&gt;

&lt;h2 id=&quot;rust-notes&quot;&gt;Rust notes&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;A new integration test crate has been added, allowing the Rust
implementation to participate in integration testing.&lt;/li&gt;
  &lt;li&gt;A new benchmark crate has been added for benchmarking performance
against popular data sets. The initial examples run SQL queries against
the NYC Taxi data set using DataFusion. This is useful for comparing
performance against other Arrow implementations.&lt;/li&gt;
  &lt;li&gt;Rust toolchain has been upgraded to 1.44 nightly.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;arrow-core&quot;&gt;Arrow Core&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Support for binary, string, and list arrays with i64 offsets to support
large lists.&lt;/li&gt;
  &lt;li&gt;A new sort kernel has been added.&lt;/li&gt;
  &lt;li&gt;There have been various improvements to dictionary array support.&lt;/li&gt;
  &lt;li&gt;CSV reader enhancements include a new CsvReadOptions struct and support
for schema inference from multiple CSV files.&lt;/li&gt;
  &lt;li&gt;There are significant (10x - 40x) performance improvements to SIMD
comparison kernels.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;datafusion&quot;&gt;DataFusion&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;There are numerous UX improvements to LogicalPlan and LogicalPlanBuilder,
including support for named columns.&lt;/li&gt;
  &lt;li&gt;General improvements to code base, such as removing many uses of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arc&lt;/code&gt;
and using slices instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;amp;Vec&lt;/code&gt; as function arguments.&lt;/li&gt;
  &lt;li&gt;ParquetScanExec performance improvement (almost 2x).&lt;/li&gt;
  &lt;li&gt;ExecutionContext can now be shared between threads.&lt;/li&gt;
  &lt;li&gt;Rust closures can now be used as Scalar UDFs.&lt;/li&gt;
  &lt;li&gt;Sort support has been added to SQL and LogicalPlan.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>pmc</name></author><category term="release" /><summary type="html">The Apache Arrow team is pleased to announce the 1.0.0 release. This covers over 3 months of development work and includes 810 resolved issues from 100 distinct contributors. See the Install Page to learn how to get the libraries for your platform. Despite a “1.0.0” version, this is the 18th major release of Apache Arrow and marks a transition to binary stability of the columnar format (which was already informally backward-compatible going back to December 2017) and a transition to Semantic Versioning for the Arrow software libraries. The release notes below are not exhaustive and only expose selected highlights of the release. Many other bugfixes and improvements have been made: we refer you to the complete changelog. 1.0.0 Columnar Format and Stability Guarantees The 1.0.0 release indicates that the Arrow columnar format is declared stable, with forward and backward compatibility guarantees. The Arrow columnar format received several recent changes and additions, leading to the 1.0.0 format version: The metadata version was bumped to a new version V5, indicating an incompatible change in the buffer layout of Union types. All other types keep the same layout as in V4. V5 also includes format additions to assist with forward compatibility (detecting unsupported changes sent by future library versions). Libraries remain backward compatible with data generated by all libraries back to 0.8.0 (December 2017) and the Java and C++ libraries are capable of generating V4-compatible messages (for sending data to applications using 0.8.0 to 0.17.1). Dictionary indices are now allowed to be unsigned integers rather than only signed integers. Using UInt64 is still discouraged because of poor Java support. A “Feature” enum has been added to announce the use of specific optional features in an IPC stream, such as buffer compression. This new field is not used by any implementation yet. Optional buffer compression using LZ4 or ZStandard was added to the IPC format. Decimal types now have an optional “bitWidth” field, defaulting to 128. This will allow for future support of other decimal widths such as 32- and 64-bit. The validity bitmap buffer has been removed from Union types. The nullity of a slot in a Union array is determined exclusively by the constituent arrays forming the union. Integration testing has been expanded to test for extension types and nested dictionaries. See the implementation matrix for details. Community Since the last release, we have added two new committers: Liya Fan Ji Liu Thank you for all your contributions! Arrow Flight RPC notes Flight now offers DoExchange, a fully bidirectional data endpoint, in addition to DoGet and DoPut, in C++, Java, and Python. Middlewares in all languages now expose binary-valued headers. Additionally, servers and clients can set Arrow IPC read/write options in all languages, making compatibility easier with earlier versions of Arrow Flight. In C++ and Python, Flight now exposes more options from gRPC, including the address of the client (on the server) and the ability to set low-level gRPC client options. Flight also supports mutual TLS authentication and the ability for a client to control the size of a data message on the wire. C++ notes Support for static linking with Arrow has been vastly improved, including the introduction of a libarrow_bundled_dependencies.a library bundling all external dependencies that are built from source by Arrow’s build system rather than installed by an external package manager. This makes it significantly easier to create dependency-free applications with all libraries statically-linked. Following the Arrow format changes, Union arrays cannot have a top-level bitmap anymore. A number of improvements were made to reduce the overall generated binary size in the Arrow library. A convenience API GetBuildInfo allows querying the characteristics of the Arrow library. We encourage you to suggest any desired addition to the returned information. We added an optional dependency to the utf8proc library, used in several compute functions (see below). Instead of sharing the same concrete classes, sparse and dense unions now have separated classes (SparseUnionType and DenseUnionType, as well as SparseUnionArray, DenseUnionArray, SparseUnionScalar, DenseUnionScalar). Arrow can now be built for iOS using the right set of CMake options, though we don’t officially support it. See this writeup for details. Compute functions The compute kernel layer was extensively reworked. It now offers a generic function lookup, dispatch and execution mechanism. Furthermore, new internal scaffoldings make it vastly easier to write new function kernels, with many common details like type checking and function dispatch based on type combinations handled by the framework rather than implemented manually by the function developer. Around 30 new array compute functions have been added. For example, Unicode-compliant predicates and transforms, such as lowercase and uppercase transforms, are now available. The available compute functions are listed exhaustively in the Sphinx-generated documentation. Datasets Datasets can now be read from CSV files. Datasets can be expanded to their component fragments, enabling fine grained interoperability with other consumers of data files. Where applicable, metadata is available as a property of the fragment, including partition information and (for the parquet format) per-column statistics. Datasets of parquet files can now be assembled from a single _metadata file, such as those created by systems like Dask and Spark. _metadata contains the metadata of all fragments, allowing construction of a statistics- aware dataset with a single IO call. Feather The Feather format is now available in version 2, which is simply the Arrow IPC file format with another name. IPC By default, we now write IPC streams with metadata V5. However, metadata V4 can be requested by setting the appropriate member in IpcWriteOptions. V4 as well as V5 metadata IPC streams can be read properly, with one exception: a V4 metadata stream containing Union arrays with top-level null values will refuse reading. As noted above, there are no changes between V4 and V5 that break backwards compatibility. For forward compatibility scenarios (where you need to generate data to be read by an older Arrow library), you can set the V4 compatibility mode. Support for dictionary replacement and dictionary delta was implemented. Parquet Writing files with the LZ4 codec is disabled because it produces files incompatible with the widely-used Hadoop Parquet implementation. Support will be reenabled once we align the LZ4 implementation with the special buffer encoding expected by Hadoop. Java notes The Java package introduces a number of low level changes in this release. Most notable are the work in support of allocating large arrow buffers and removing Netty from the public API. Users will have to update their dependencies to use one of the two supported allocators Netty: arrow-memory-netty or Unsafe (internal java api for direct memory) arrow-memory-unsafe. The Java Vector implementation has improved its interoperability having verified LargeVarChar, LargeBinary, LargeList, Union, Extension types and duplicate field names in Structs are binary compatible with C++ and the specification. Python notes The size of wheel packages is significantly reduced, up to 75%. One side effect is that these wheels do not enable Gandiva anymore (which requires the LLVM runtime to be statically-linked). We are interested in providing Gandiva as an add-on package as a separate Python wheel in the future. The Scalar class hierarchy was reworked to more closely follow its C++ counterpart. TLS CA certificates are looked up more reliably when using the S3 filesystem, especially with manylinux wheels. The encoding of CSV files can now be specified explicitly, defaulting to UTF8. Custom timestamp parsers can now be used for CSV files. Filesystems can now be implemented in pure Python. As a result, fsspec-based filesystems can now be used in datasets. parquet.read_table is now backed by the dataset API by default, enabling filters on any column and more flexible partitioning. R notes The R package added support for converting to and from many additional Arrow types. Tables showing how R types are mapped to Arrow types and vice versa have been added to the introductory vignette, and nearly all types are handled. In addition, R attributes like custom classes and metadata are now preserved when converting a data.frame to an Arrow Table and are restored when loading them back into R. For more on what’s in the 1.0.0 R package, see the R changelog. Ruby and C GLib notes The Ruby and C GLib packages added support for the new compute function framework, in which users can find a compute function dynamically and call it. Users don’t need to wait for a C GLib binding for new compute functions: if the C++ package provides a new compute function, users can use it without additional code in the Ruby and C GLib packages. The Ruby and C GLib packages added support for Apache Arrow Dataset. The Ruby package provides a new gem for Apache Arrow Dataset, red-arrow-dataset. The C GLib package provides a new module for Apache Arrow Dataset, arrow-dataset-glib. They just have a few features for now but we will add more in future releases. The Ruby and C GLib packages added support for reading only the specified row group in an Apache Parquet file. Ruby The Ruby package added support for column level compression in writing Apache Parquet files. The Ruby package changed the Arrow::DictionaryArray#[] behavior. It now returns the dictionary value instead of the dictionary index. This is a backwards-incompatible change. Rust notes A new integration test crate has been added, allowing the Rust implementation to participate in integration testing. A new benchmark crate has been added for benchmarking performance against popular data sets. The initial examples run SQL queries against the NYC Taxi data set using DataFusion. This is useful for comparing performance against other Arrow implementations. Rust toolchain has been upgraded to 1.44 nightly. Arrow Core Support for binary, string, and list arrays with i64 offsets to support large lists. A new sort kernel has been added. There have been various improvements to dictionary array support. CSV reader enhancements include a new CsvReadOptions struct and support for schema inference from multiple CSV files. There are significant (10x - 40x) performance improvements to SIMD comparison kernels. DataFusion There are numerous UX improvements to LogicalPlan and LogicalPlanBuilder, including support for named columns. General improvements to code base, such as removing many uses of Arc and using slices instead of &amp;amp;Vec as function arguments. ParquetScanExec performance improvement (almost 2x). ExecutionContext can now be shared between threads. Rust closures can now be used as Scalar UDFs. Sort support has been added to SQL and LogicalPlan.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://arrow.apache.org/img/arrow.png" /><media:content medium="image" url="https://arrow.apache.org/img/arrow.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Introducing the Apache Arrow C Data Interface</title><link href="https://arrow.apache.org/blog/2020/05/03/introducing-arrow-c-data-interface/" rel="alternate" type="text/html" title="Introducing the Apache Arrow C Data Interface" /><published>2020-05-03T19:00:00-04:00</published><updated>2020-05-03T19:00:00-04:00</updated><id>https://arrow.apache.org/blog/2020/05/03/introducing-arrow-c-data-interface</id><content type="html" xml:base="https://arrow.apache.org/blog/2020/05/03/introducing-arrow-c-data-interface/">&lt;!--

--&gt;

&lt;p&gt;Apache Arrow includes a cross-language, platform-independent in-memory
&lt;a href=&quot;https://arrow.apache.org/docs/format/Columnar.html&quot;&gt;columnar format&lt;/a&gt;
allowing zero-copy data sharing and transfer between heterogenous runtimes
and applications.&lt;/p&gt;

&lt;p&gt;The easiest way to use the Arrow columnar format has always been to depend
on one of the concrete implementations developed by the Apache Arrow community.
The project codebase contains libraries for 11 different programming languages
so far, and will likely grow to include more languages in the future.&lt;/p&gt;

&lt;p&gt;However, some projects may wish to import and export the Arrow columnar format
without taking on a new library dependency, such as the Arrow C++ library.
We have therefore designed an alternative which exchanges data at the C level,
conforming to a simple data definition.  The C Data Interface carries no dependencies
except a shared C ABI between binaries which use it.  C ABIs are platform-wide standards
which are necessarily adhered to by all compilers which generate binaries and are extremely
stable, ensuring portability of libraries and executable binaries.  Two libraries that utilize
the C structures defined by the C Data Interface can do zero-copy data
transfers at runtime without any build-time or link-time dependency
requirements.&lt;/p&gt;

&lt;p&gt;The best way to learn about the C Data Interface is to read the
&lt;a href=&quot;https://arrow.apache.org/docs/format/CDataInterface.html&quot;&gt;spec&lt;/a&gt;.
However, we will quickly go over its strong points.&lt;/p&gt;

&lt;h2 id=&quot;two-simple-struct-definitions&quot;&gt;Two simple struct definitions&lt;/h2&gt;

&lt;p&gt;To interact with the C Data Interface at the C or C++ level, the only
thing you have to include in your code is two struct type declarations
(and a couple of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#define&lt;/code&gt;s for constant values).  Those declarations
only depend on standard C types, and can simply be pasted in a header
file.  Other languages can also participate as long as they provide a
Foreign Function Interface layer; this is the case for most modern
languages, such as Python (with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ctypes&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cffi&lt;/code&gt;), Julia, Rust, Go, etc.&lt;/p&gt;

&lt;h2 id=&quot;zero-copy-data-sharing&quot;&gt;Zero-copy data sharing&lt;/h2&gt;

&lt;p&gt;The C Data Interface passes Arrow data buffers through memory pointers.  So,
by construction, it allows you to share data from one runtime to
another without copying it.  Since the data is in standard
&lt;a href=&quot;https://arrow.apache.org/docs/format/Columnar.html&quot;&gt;Arrow in-memory format&lt;/a&gt;,
its layout is well-defined and unambiguous.&lt;/p&gt;

&lt;p&gt;This design also restricts the C Data Interface to &lt;em&gt;in-process&lt;/em&gt; data sharing.
For interprocess communication, we recommend use of the Arrow
&lt;a href=&quot;https://arrow.apache.org/docs/format/Columnar.html#serialization-and-interprocess-communication-ipc&quot;&gt;IPC format&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;reduced-marshalling&quot;&gt;Reduced marshalling&lt;/h2&gt;

&lt;p&gt;The C Data Interface stays close to the natural way of expressing Arrow-like
data in C or C++.  Only two aspects involve non-trivial marshalling:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the encoding of data types, using a very simple string-based language&lt;/li&gt;
  &lt;li&gt;the encoding of optional metadata, using a very simple length-prefixed format&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;separate-type-and-data-representation&quot;&gt;Separate type and data representation&lt;/h2&gt;

&lt;p&gt;For applications which produce many instances of data of a single datatype
(for example, as a stream of record batches), repeatedly reconstructing the
datatype from its string encoding would represent unnecessary overhead.  To
address this use case, the C Data Interface defines two independent structures:
one representing a datatype (and optional metadata), one representing a piece
of data.&lt;/p&gt;

&lt;h2 id=&quot;lifetime-handling&quot;&gt;Lifetime handling&lt;/h2&gt;

&lt;p&gt;One common difficulty of data sharing between heterogenous runtimes is to
correctly handle the lifetime of data.  The C Data Interface allows the producer
to define its own memory management scheme through a release callback.
This is a simple function pointer which consumers will call when they are
finished using the data.  For example when used as a producer the Arrow C++
library passes a release callback which simply decrements a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;shared_ptr&lt;/code&gt;’s
reference count.&lt;/p&gt;

&lt;h2 id=&quot;application-passing-data-between-r-and-python&quot;&gt;Application: passing data between R and Python&lt;/h2&gt;

&lt;p&gt;The R and Python Arrow libraries are both based on the Arrow C++ library,
however their respective toolchains (mandated by the R and Python packaging
standards) are ABI-incompatible.  It is therefore impossible to pass data
directly at the C++ level between the R and Python bindings.&lt;/p&gt;

&lt;p&gt;Using the C Data Interface, we have circumvented this restriction and provide
a zero-copy data sharing API between R and Python.  It is based on the R
&lt;a href=&quot;https://rstudio.github.io/reticulate/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reticulate&lt;/code&gt;&lt;/a&gt; library.&lt;/p&gt;

&lt;p&gt;Here is an example session mixing R and Python library calls:&lt;/p&gt;

&lt;div class=&quot;language-r highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;library&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arrow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;library&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reticulate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;use_virtualenv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;arrow&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pa&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;pyarrow&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Create an array in PyArrow&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pa&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;## Array&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;## &amp;lt;double&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;## [&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;##   1,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;##   2,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;##   3&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;## ]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Apply R methods on the PyArrow-created array:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;## Array&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;## &amp;lt;double&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;## [&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;##   2,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;##   3&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;## ]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Create an array in R and pass it to PyArrow&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a_and_b&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pa&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;concat_arrays&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_to_py&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a_and_b&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;## Array&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;## &amp;lt;double&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;## [&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;##   1,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;##   2,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;##   3,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;##   5,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;##   6,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;##   7&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;## ]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>apitrou</name></author><category term="application" /><summary type="html">Apache Arrow includes a cross-language, platform-independent in-memory columnar format allowing zero-copy data sharing and transfer between heterogenous runtimes and applications. The easiest way to use the Arrow columnar format has always been to depend on one of the concrete implementations developed by the Apache Arrow community. The project codebase contains libraries for 11 different programming languages so far, and will likely grow to include more languages in the future. However, some projects may wish to import and export the Arrow columnar format without taking on a new library dependency, such as the Arrow C++ library. We have therefore designed an alternative which exchanges data at the C level, conforming to a simple data definition. The C Data Interface carries no dependencies except a shared C ABI between binaries which use it. C ABIs are platform-wide standards which are necessarily adhered to by all compilers which generate binaries and are extremely stable, ensuring portability of libraries and executable binaries. Two libraries that utilize the C structures defined by the C Data Interface can do zero-copy data transfers at runtime without any build-time or link-time dependency requirements. The best way to learn about the C Data Interface is to read the spec. However, we will quickly go over its strong points. Two simple struct definitions To interact with the C Data Interface at the C or C++ level, the only thing you have to include in your code is two struct type declarations (and a couple of #defines for constant values). Those declarations only depend on standard C types, and can simply be pasted in a header file. Other languages can also participate as long as they provide a Foreign Function Interface layer; this is the case for most modern languages, such as Python (with ctypes or cffi), Julia, Rust, Go, etc. Zero-copy data sharing The C Data Interface passes Arrow data buffers through memory pointers. So, by construction, it allows you to share data from one runtime to another without copying it. Since the data is in standard Arrow in-memory format, its layout is well-defined and unambiguous. This design also restricts the C Data Interface to in-process data sharing. For interprocess communication, we recommend use of the Arrow IPC format. Reduced marshalling The C Data Interface stays close to the natural way of expressing Arrow-like data in C or C++. Only two aspects involve non-trivial marshalling: the encoding of data types, using a very simple string-based language the encoding of optional metadata, using a very simple length-prefixed format Separate type and data representation For applications which produce many instances of data of a single datatype (for example, as a stream of record batches), repeatedly reconstructing the datatype from its string encoding would represent unnecessary overhead. To address this use case, the C Data Interface defines two independent structures: one representing a datatype (and optional metadata), one representing a piece of data. Lifetime handling One common difficulty of data sharing between heterogenous runtimes is to correctly handle the lifetime of data. The C Data Interface allows the producer to define its own memory management scheme through a release callback. This is a simple function pointer which consumers will call when they are finished using the data. For example when used as a producer the Arrow C++ library passes a release callback which simply decrements a shared_ptr’s reference count. Application: passing data between R and Python The R and Python Arrow libraries are both based on the Arrow C++ library, however their respective toolchains (mandated by the R and Python packaging standards) are ABI-incompatible. It is therefore impossible to pass data directly at the C++ level between the R and Python bindings. Using the C Data Interface, we have circumvented this restriction and provide a zero-copy data sharing API between R and Python. It is based on the R reticulate library. Here is an example session mixing R and Python library calls: library(arrow) library(reticulate) use_virtualenv(&quot;arrow&quot;) pa &amp;lt;- import(&quot;pyarrow&quot;) # Create an array in PyArrow a &amp;lt;- pa$array(c(1, 2, 3)) a ## Array ## &amp;lt;double&amp;gt; ## [ ## 1, ## 2, ## 3 ## ] # Apply R methods on the PyArrow-created array: a[a &amp;gt; 1] ## Array ## &amp;lt;double&amp;gt; ## [ ## 2, ## 3 ## ] # Create an array in R and pass it to PyArrow b &amp;lt;- Array$create(c(5, 6, 7)) a_and_b &amp;lt;- pa$concat_arrays(r_to_py(list(a, b))) a_and_b ## Array ## &amp;lt;double&amp;gt; ## [ ## 1, ## 2, ## 3, ## 5, ## 6, ## 7 ## ]</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://arrow.apache.org/img/arrow.png" /><media:content medium="image" url="https://arrow.apache.org/img/arrow.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Apache Arrow 0.17.0 Release</title><link href="https://arrow.apache.org/blog/2020/04/21/0.17.0-release/" rel="alternate" type="text/html" title="Apache Arrow 0.17.0 Release" /><published>2020-04-21T02:00:00-04:00</published><updated>2020-04-21T02:00:00-04:00</updated><id>https://arrow.apache.org/blog/2020/04/21/0.17.0-release</id><content type="html" xml:base="https://arrow.apache.org/blog/2020/04/21/0.17.0-release/">&lt;!--

--&gt;

&lt;p&gt;The Apache Arrow team is pleased to announce the 0.17.0 release. This covers
over 2 months of development work and includes &lt;a href=&quot;https://issues.apache.org/jira/issues/?jql=project%20%3D%20ARROW%20AND%20status%20%3D%20Resolved%20AND%20fixVersion%20%3D%200.17.0&quot;&gt;&lt;strong&gt;569 resolved issues&lt;/strong&gt;&lt;/a&gt;
from &lt;a href=&quot;https://arrow.apache.org/release/0.17.0.html#contributors&quot;&gt;&lt;strong&gt;79 distinct contributors&lt;/strong&gt;&lt;/a&gt;. See the Install Page to learn how to
get the libraries for your platform.&lt;/p&gt;

&lt;p&gt;The release notes below are not exhaustive and only expose selected highlights
of the release. Many other bugfixes and improvements have been made: we refer
you to the &lt;a href=&quot;https://arrow.apache.org/release/0.17.0.html&quot;&gt;complete changelog&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;community&quot;&gt;Community&lt;/h2&gt;

&lt;p&gt;Since the 0.16.0 release, two committers have joined the Project Management
Committee (PMC):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/nealrichardson&quot;&gt;Neal Richardson&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/fsaintjacques&quot;&gt;François Saint-Jacques&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thank you for all your contributions!&lt;/p&gt;

&lt;h2 id=&quot;columnar-format-notes&quot;&gt;Columnar Format Notes&lt;/h2&gt;

&lt;p&gt;A &lt;a href=&quot;https://arrow.apache.org/docs/format/CDataInterface.html&quot;&gt;C-level Data Interface&lt;/a&gt; was designed to ease data sharing inside a single
process. It allows different runtimes or libraries to share Arrow data using a
well-known binary layout and metadata representation, without any copies. Third
party libraries can use the C interface to import and export the Arrow columnar
format in-process without requiring on any new code dependencies.&lt;/p&gt;

&lt;p&gt;The C++ library now includes an implementation of the C Data Interface, and
Python and R have bindings to that implementation.&lt;/p&gt;

&lt;h2 id=&quot;arrow-flight-rpc-notes&quot;&gt;Arrow Flight RPC notes&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Adopted new DoExchange bi-directional data RPC&lt;/li&gt;
  &lt;li&gt;ListFlights supports being passed a Criteria argument in
Java/C++/Python. This allows applications to search for flights satisfying a
given query.&lt;/li&gt;
  &lt;li&gt;Custom metadata can be attached to errors that the server sends to the
client, which can be used to encode richer application-specific information.&lt;/li&gt;
  &lt;li&gt;A number of minor bugs were fixed, including proper handling of empty null
arrays in Java and round-tripping of certain Arrow status codes in
C++/Python.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;c-notes&quot;&gt;C++ notes&lt;/h2&gt;

&lt;h3 id=&quot;feather-v2&quot;&gt;Feather V2&lt;/h3&gt;

&lt;p&gt;The “Feather V2” format based on the Arrow IPC file format was developed.
Feather V2 features full support for all Arrow data types, and resolves the 2GB
per-column limitation for large amounts of string data that the &lt;a href=&quot;https://github.com/wesm/feather&quot;&gt;original
Feather implementation&lt;/a&gt; had.  Feather V2 also introduces experimental IPC
message compression using LZ4 frame format or ZSTD. This will be formalized
later in the Arrow format.&lt;/p&gt;

&lt;h3 id=&quot;c-datasets&quot;&gt;C++ Datasets&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Improve speed on high latency file system by relaxing discovery validation&lt;/li&gt;
  &lt;li&gt;Better performance with Arrow IPC files using column projection&lt;/li&gt;
  &lt;li&gt;Add the ability to list files in FileSystemDataset&lt;/li&gt;
  &lt;li&gt;Add support for Parquet file reader options&lt;/li&gt;
  &lt;li&gt;Support dictionary columns in partition expression&lt;/li&gt;
  &lt;li&gt;Fix various crashes and other issues&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;c-parquet-notes&quot;&gt;C++ Parquet notes&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Complete support for writing nested types to Parquet format was
completed. The legacy code can be accessed through parquet write option C++
and an environment variable in Python. Read support will come in a future
release.&lt;/li&gt;
  &lt;li&gt;The BYTE_STREAM_SPLIT encoding was implemented for floating-point types. It
helps improve the efficiency of memory compression for high-entropy data.&lt;/li&gt;
  &lt;li&gt;Expose Parquet schema field_id as Arrow field metadata&lt;/li&gt;
  &lt;li&gt;Support for DataPageV2 data page format&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;c-build-notes&quot;&gt;C++ build notes&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;We continued to make the core C++ library build simpler and faster. Among the
improvements are the removal of the dependency on Thrift IDL compiler at
build time; while Parquet still requires the Thrift runtime C++ library, its
dependencies are much lighter. We also further reduced the number of build
configurations that require Boost, and when Boost is needed to be built, we
only download the components we need, reducing the size of the Boost bundle
by 90%.&lt;/li&gt;
  &lt;li&gt;Improved support for building on ARM platforms&lt;/li&gt;
  &lt;li&gt;Upgraded LLVM version from 7 to 8&lt;/li&gt;
  &lt;li&gt;Simplified SIMD build configuration with ARROW_SIMD_LEVEL option allowing no
SIMD, SSE4.2, AVX2, or AVX512 to be selected.&lt;/li&gt;
  &lt;li&gt;Fixed a number of bugs affecting compilation on aarch64 platforms&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;other-c-notes&quot;&gt;Other C++ notes&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Many crashes on invalid input detected by &lt;a href=&quot;https://google.github.io/oss-fuzz/&quot;&gt;OSS-Fuzz&lt;/a&gt; in the IPC reader and
in Parquet-Arrow reading were fixed. See our recent &lt;a href=&quot;https://arrow.apache.org/blog/2020/03/31/fuzzing-arrow-ipc/&quot;&gt;blog post&lt;/a&gt; for more
details.&lt;/li&gt;
  &lt;li&gt;A “Device” abstraction was added to simplify buffer management and movement
across heterogeneous hardware configurations, e.g. CPUs and GPUs.&lt;/li&gt;
  &lt;li&gt;A streaming CSV reader was implemented, yielding individual RecordBatches and
helping limit overall memory occupation.&lt;/li&gt;
  &lt;li&gt;Array casting from Decimal128 to integer types and to Decimal128 with
different scale/precision was added.&lt;/li&gt;
  &lt;li&gt;Sparse CSF tensors are now supported.&lt;/li&gt;
  &lt;li&gt;When creating an Array, the null bitmap is not kept if the null count is known to be zero&lt;/li&gt;
  &lt;li&gt;Compressor support for the LZ4 frame format (LZ4_FRAME) was added&lt;/li&gt;
  &lt;li&gt;An event-driven interface for reading IPC streams was added.&lt;/li&gt;
  &lt;li&gt;Further core APIs that required passing an explicit out-parameter were
migrated to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Result&amp;lt;T&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;New analytics kernels for match, sort indices / argsort, top-k&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;java-notes&quot;&gt;Java notes&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Netty dependencies were removed for BufferAllocator and ReferenceManager
classes. In the future, we plan to move netty related classes to a separate
module.&lt;/li&gt;
  &lt;li&gt;New features were provided to support efficiently appending vector/vector
schema root values in batch.&lt;/li&gt;
  &lt;li&gt;Comparing a range of values in dense union vectors has been supported.&lt;/li&gt;
  &lt;li&gt;The quick sort algorithm was improved to avoid degenerating to the worst case.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;python-notes&quot;&gt;Python notes&lt;/h2&gt;

&lt;h3 id=&quot;datasets&quot;&gt;Datasets&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Updated &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pyarrow.dataset&lt;/code&gt; module following the changes in the C++ Datasets
project. This release also adds &lt;a href=&quot;https://arrow.apache.org/docs/python/dataset.html&quot;&gt;richer documentation&lt;/a&gt; on the datasets
module.&lt;/li&gt;
  &lt;li&gt;Support for the improved dataset functionality in
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pyarrow.parquet.read_table/ParquetDataset&lt;/code&gt;. To enable, pass
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;use_legacy_dataset=False&lt;/code&gt;. Among other things, this allows to specify filters
for all columns and not only the partition keys (using row group statistics)
and enables different partitioning schemes. See the “note” in the
&lt;a href=&quot;https://arrow.apache.org/docs/python/parquet.html#reading-from-partitioned-datasets&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ParquetDataset&lt;/code&gt; documentation&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;packaging&quot;&gt;Packaging&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Wheels for Python 3.8 are now available&lt;/li&gt;
  &lt;li&gt;Support for Python 2.7 has been dropped as Python 2.x reached end-of-life in
January 2020.&lt;/li&gt;
  &lt;li&gt;Nightly wheels and conda packages are now available for testing or other
development purposes. See the &lt;a href=&quot;https://arrow.apache.org/docs/python/install.html#installing-nightly-packages&quot;&gt;installation guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;other-improvements&quot;&gt;Other improvements&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Conversion to numpy/pandas for FixedSizeList, LargeString, LargeBinary&lt;/li&gt;
  &lt;li&gt;Sparse CSC matrices and Sparse CSF tensors support was added. (ARROW-7419,
ARROW-7427)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;r-notes&quot;&gt;R notes&lt;/h2&gt;

&lt;p&gt;Highlights include support for the Feather V2 format and the C Data Interface,
both described above. Along with low-level bindings for the C interface, this
release adds tooling to work with Arrow data in Python using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reticulate&lt;/code&gt;. See
&lt;a href=&quot;https://arrow.apache.org/docs/r/articles/python.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vignette(&quot;python&quot;, package = &quot;arrow&quot;)&lt;/code&gt;&lt;/a&gt; for a guide to getting started.&lt;/p&gt;

&lt;p&gt;Installation on Linux now builds C++ the library from source by default. For a
faster, richer build, set the environment variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NOT_CRAN=true&lt;/code&gt;. See
&lt;a href=&quot;https://arrow.apache.org/docs/r/articles/install.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vignette(&quot;install&quot;, package = &quot;arrow&quot;)&lt;/code&gt;&lt;/a&gt; for details and more options.&lt;/p&gt;

&lt;p&gt;For more on what’s in the 0.17 R package, see the &lt;a href=&quot;https://arrow.apache.org/docs/r/news/&quot;&gt;R changelog&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;ruby-and-c-glib-notes&quot;&gt;Ruby and C GLib notes&lt;/h2&gt;

&lt;h3 id=&quot;ruby&quot;&gt;Ruby&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Support Ruby 2.3 again&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;c-glib&quot;&gt;C GLib&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Add GArrowRecordBatchIterator&lt;/li&gt;
  &lt;li&gt;Add support for GArrowFilterOptions&lt;/li&gt;
  &lt;li&gt;Add support for Peek() to GIOInputStream&lt;/li&gt;
  &lt;li&gt;Add some metadata bindings to GArrowSchema&lt;/li&gt;
  &lt;li&gt;Add LocalFileSystem support&lt;/li&gt;
  &lt;li&gt;Add support for writer properties of Parquet&lt;/li&gt;
  &lt;li&gt;Add support for MapArray&lt;/li&gt;
  &lt;li&gt;Add support for BooleanNode&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;rust-notes&quot;&gt;Rust notes&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;DictionayArray support.&lt;/li&gt;
  &lt;li&gt;Various improvements to code safety.&lt;/li&gt;
  &lt;li&gt;Filter kernel now supports temporal types.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;rust-parquet-notes&quot;&gt;Rust Parquet notes&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Array reader now supports temporal types.&lt;/li&gt;
  &lt;li&gt;Parquet writer now supports custom meta-data key/value pairs.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;rust-datafusion-notes&quot;&gt;Rust DataFusion notes&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Logical plans can now reference columns by name (as well as by index) using
the new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UnresolvedColumn&lt;/code&gt; expression. There is a new optimizer rule to
resolve these into column indices.&lt;/li&gt;
  &lt;li&gt;Scalar UDFs can now be registered with the execution context and used from
logical query plans as well as from SQL. A number of math scalar functions
have been implemented using this feature (sqrt, cos, sin, tan, asin, acos,
atan, floor, ceil, round, trunc, abs, signum, exp, log, log2, log10).&lt;/li&gt;
  &lt;li&gt;Various SQL improvements, including support for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SELECT *&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SELECT
COUNT(*)&lt;/code&gt;, and improvements to parsing of aggregate queries.&lt;/li&gt;
  &lt;li&gt;Flight examples are provided, with a client that sends a SQL statement to a
Flight server and receives the results.&lt;/li&gt;
  &lt;li&gt;The interactive SQL command-line tool now has improved documentation and
better formatting of query results.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;project-operations&quot;&gt;Project Operations&lt;/h2&gt;

&lt;p&gt;We’ve continued our migration of general automation toward GitHub Actions. The
majority of our commit-by-commit continuous integration (CI) is now running on
GitHub Actions. We are working on different solutions for using dedicated
hardware as part of our CI. The &lt;a href=&quot;https://buildkite.com/&quot;&gt;Buildkite&lt;/a&gt; self-hosted CI/CD platform is
now supported on Apache repositories and GitHub Actions also supports
self-hosted workers.&lt;/p&gt;</content><author><name>pmc</name></author><category term="release" /><summary type="html">The Apache Arrow team is pleased to announce the 0.17.0 release. This covers over 2 months of development work and includes 569 resolved issues from 79 distinct contributors. See the Install Page to learn how to get the libraries for your platform. The release notes below are not exhaustive and only expose selected highlights of the release. Many other bugfixes and improvements have been made: we refer you to the complete changelog. Community Since the 0.16.0 release, two committers have joined the Project Management Committee (PMC): Neal Richardson François Saint-Jacques Thank you for all your contributions! Columnar Format Notes A C-level Data Interface was designed to ease data sharing inside a single process. It allows different runtimes or libraries to share Arrow data using a well-known binary layout and metadata representation, without any copies. Third party libraries can use the C interface to import and export the Arrow columnar format in-process without requiring on any new code dependencies. The C++ library now includes an implementation of the C Data Interface, and Python and R have bindings to that implementation. Arrow Flight RPC notes Adopted new DoExchange bi-directional data RPC ListFlights supports being passed a Criteria argument in Java/C++/Python. This allows applications to search for flights satisfying a given query. Custom metadata can be attached to errors that the server sends to the client, which can be used to encode richer application-specific information. A number of minor bugs were fixed, including proper handling of empty null arrays in Java and round-tripping of certain Arrow status codes in C++/Python. C++ notes Feather V2 The “Feather V2” format based on the Arrow IPC file format was developed. Feather V2 features full support for all Arrow data types, and resolves the 2GB per-column limitation for large amounts of string data that the original Feather implementation had. Feather V2 also introduces experimental IPC message compression using LZ4 frame format or ZSTD. This will be formalized later in the Arrow format. C++ Datasets Improve speed on high latency file system by relaxing discovery validation Better performance with Arrow IPC files using column projection Add the ability to list files in FileSystemDataset Add support for Parquet file reader options Support dictionary columns in partition expression Fix various crashes and other issues C++ Parquet notes Complete support for writing nested types to Parquet format was completed. The legacy code can be accessed through parquet write option C++ and an environment variable in Python. Read support will come in a future release. The BYTE_STREAM_SPLIT encoding was implemented for floating-point types. It helps improve the efficiency of memory compression for high-entropy data. Expose Parquet schema field_id as Arrow field metadata Support for DataPageV2 data page format C++ build notes We continued to make the core C++ library build simpler and faster. Among the improvements are the removal of the dependency on Thrift IDL compiler at build time; while Parquet still requires the Thrift runtime C++ library, its dependencies are much lighter. We also further reduced the number of build configurations that require Boost, and when Boost is needed to be built, we only download the components we need, reducing the size of the Boost bundle by 90%. Improved support for building on ARM platforms Upgraded LLVM version from 7 to 8 Simplified SIMD build configuration with ARROW_SIMD_LEVEL option allowing no SIMD, SSE4.2, AVX2, or AVX512 to be selected. Fixed a number of bugs affecting compilation on aarch64 platforms Other C++ notes Many crashes on invalid input detected by OSS-Fuzz in the IPC reader and in Parquet-Arrow reading were fixed. See our recent blog post for more details. A “Device” abstraction was added to simplify buffer management and movement across heterogeneous hardware configurations, e.g. CPUs and GPUs. A streaming CSV reader was implemented, yielding individual RecordBatches and helping limit overall memory occupation. Array casting from Decimal128 to integer types and to Decimal128 with different scale/precision was added. Sparse CSF tensors are now supported. When creating an Array, the null bitmap is not kept if the null count is known to be zero Compressor support for the LZ4 frame format (LZ4_FRAME) was added An event-driven interface for reading IPC streams was added. Further core APIs that required passing an explicit out-parameter were migrated to Result&amp;lt;T&amp;gt;. New analytics kernels for match, sort indices / argsort, top-k Java notes Netty dependencies were removed for BufferAllocator and ReferenceManager classes. In the future, we plan to move netty related classes to a separate module. New features were provided to support efficiently appending vector/vector schema root values in batch. Comparing a range of values in dense union vectors has been supported. The quick sort algorithm was improved to avoid degenerating to the worst case. Python notes Datasets Updated pyarrow.dataset module following the changes in the C++ Datasets project. This release also adds richer documentation on the datasets module. Support for the improved dataset functionality in pyarrow.parquet.read_table/ParquetDataset. To enable, pass use_legacy_dataset=False. Among other things, this allows to specify filters for all columns and not only the partition keys (using row group statistics) and enables different partitioning schemes. See the “note” in the ParquetDataset documentation. Packaging Wheels for Python 3.8 are now available Support for Python 2.7 has been dropped as Python 2.x reached end-of-life in January 2020. Nightly wheels and conda packages are now available for testing or other development purposes. See the installation guide Other improvements Conversion to numpy/pandas for FixedSizeList, LargeString, LargeBinary Sparse CSC matrices and Sparse CSF tensors support was added. (ARROW-7419, ARROW-7427) R notes Highlights include support for the Feather V2 format and the C Data Interface, both described above. Along with low-level bindings for the C interface, this release adds tooling to work with Arrow data in Python using reticulate. See vignette(&quot;python&quot;, package = &quot;arrow&quot;) for a guide to getting started. Installation on Linux now builds C++ the library from source by default. For a faster, richer build, set the environment variable NOT_CRAN=true. See vignette(&quot;install&quot;, package = &quot;arrow&quot;) for details and more options. For more on what’s in the 0.17 R package, see the R changelog. Ruby and C GLib notes Ruby Support Ruby 2.3 again C GLib Add GArrowRecordBatchIterator Add support for GArrowFilterOptions Add support for Peek() to GIOInputStream Add some metadata bindings to GArrowSchema Add LocalFileSystem support Add support for writer properties of Parquet Add support for MapArray Add support for BooleanNode Rust notes DictionayArray support. Various improvements to code safety. Filter kernel now supports temporal types. Rust Parquet notes Array reader now supports temporal types. Parquet writer now supports custom meta-data key/value pairs. Rust DataFusion notes Logical plans can now reference columns by name (as well as by index) using the new UnresolvedColumn expression. There is a new optimizer rule to resolve these into column indices. Scalar UDFs can now be registered with the execution context and used from logical query plans as well as from SQL. A number of math scalar functions have been implemented using this feature (sqrt, cos, sin, tan, asin, acos, atan, floor, ceil, round, trunc, abs, signum, exp, log, log2, log10). Various SQL improvements, including support for SELECT * and SELECT COUNT(*), and improvements to parsing of aggregate queries. Flight examples are provided, with a client that sends a SQL statement to a Flight server and receives the results. The interactive SQL command-line tool now has improved documentation and better formatting of query results. Project Operations We’ve continued our migration of general automation toward GitHub Actions. The majority of our commit-by-commit continuous integration (CI) is now running on GitHub Actions. We are working on different solutions for using dedicated hardware as part of our CI. The Buildkite self-hosted CI/CD platform is now supported on Apache repositories and GitHub Actions also supports self-hosted workers.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://arrow.apache.org/img/arrow.png" /><media:content medium="image" url="https://arrow.apache.org/img/arrow.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>